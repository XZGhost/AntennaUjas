
AntennaUjas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a8  080062a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080062a8  080062a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062a8  080062a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000050c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a61b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003882  00000000  00000000  0003a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002134f  00000000  00000000  000409a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d187  00000000  00000000  00061cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c04b8  00000000  00000000  0007ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f336  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065f0  00000000  00000000  0013f388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060f8 	.word	0x080060f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060f8 	.word	0x080060f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <NRF905_setAddress>:
					| val);

	return 0;
}

int NRF905_setAddress(NRF905_t *dev, uint32_t address, uint8_t cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	4613      	mov	r3, r2
 800027c:	71fb      	strb	r3, [r7, #7]
	if (dev == NULL) {
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <NRF905_setAddress+0x1a>
		return -1;
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	e02a      	b.n	80002e0 <NRF905_setAddress+0x70>
	}
	uint8_t i;
	NRF905_HW_SPI_SELECT(dev->hw);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	2106      	movs	r1, #6
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f910 	bl	80004b8 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, cmd, NULL);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	79f9      	ldrb	r1, [r7, #7]
 800029e:	2200      	movs	r2, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f99b 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	75fb      	strb	r3, [r7, #23]
 80002aa:	e00e      	b.n	80002ca <NRF905_setAddress+0x5a>
		NRF905_hw_spi_transfer(dev->hw, address >> (8 * i), NULL);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6818      	ldr	r0, [r3, #0]
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	68ba      	ldr	r2, [r7, #8]
 80002b6:	fa22 f303 	lsr.w	r3, r2, r3
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 f98c 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 80002c4:	7dfb      	ldrb	r3, [r7, #23]
 80002c6:	3301      	adds	r3, #1
 80002c8:	75fb      	strb	r3, [r7, #23]
 80002ca:	7dfb      	ldrb	r3, [r7, #23]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	d9ed      	bls.n	80002ac <NRF905_setAddress+0x3c>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2201      	movs	r2, #1
 80002d6:	2106      	movs	r1, #6
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f8ed 	bl	80004b8 <NRF905_hw_gpio_set>

	return 0;
 80002de:	2300      	movs	r3, #0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <NRF905_set_listen_address>:
	}

	return NRF905_hw_gpio_get(dev->hw, NRF905_HW_GPIO_CD);
}

int NRF905_set_listen_address(NRF905_t *dev, uint32_t address) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (dev == NULL) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d102      	bne.n	80002fe <NRF905_set_listen_address+0x16>
		return -1;
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	e005      	b.n	800030a <NRF905_set_listen_address+0x22>
	}
	NRF905_setAddress(dev, address,
 80002fe:	2205      	movs	r2, #5
 8000300:	6839      	ldr	r1, [r7, #0]
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f7ff ffb4 	bl	8000270 <NRF905_setAddress>
	NRF905_CMD_W_CONFIG | NRF905_REG_RX_ADDRESS);
	return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <NRF905_init>:
	NRF905_HW_SPI_DESELECT(dev->hw);

	return 0;
}

int NRF905_init(NRF905_t *dev, NRF905_hw_t *hw) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
	uint8_t i;

	if (dev == NULL) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d102      	bne.n	800032a <NRF905_init+0x16>
		return -1;
 8000324:	f04f 33ff 	mov.w	r3, #4294967295
 8000328:	e0c0      	b.n	80004ac <NRF905_init+0x198>
	}

	if (hw == NULL) {
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d102      	bne.n	8000336 <NRF905_init+0x22>
		return -2;
 8000330:	f06f 0301 	mvn.w	r3, #1
 8000334:	e0ba      	b.n	80004ac <NRF905_init+0x198>
	}

	dev->hw = hw;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	601a      	str	r2, [r3, #0]

	dev->software_pin_configuration = 0x00;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	741a      	strb	r2, [r3, #16]

	NRF905_hw_enable_timer(hw);
 8000342:	6838      	ldr	r0, [r7, #0]
 8000344:	f000 f92d 	bl	80005a2 <NRF905_hw_enable_timer>

	if (hw->gpio[NRF905_HW_GPIO_DR].port == NULL) {
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034c:	2b00      	cmp	r3, #0
 800034e:	d106      	bne.n	800035e <NRF905_init+0x4a>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_DATA_READY;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7c1b      	ldrb	r3, [r3, #16]
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	b2da      	uxtb	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	741a      	strb	r2, [r3, #16]
	}
	if (hw->gpio[NRF905_HW_GPIO_AM].port == NULL) {
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000362:	2b00      	cmp	r3, #0
 8000364:	d106      	bne.n	8000374 <NRF905_init+0x60>
		dev->software_pin_configuration |= NRF905_USE_SOFTWARE_ADDRESS_MATCH;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	7c1b      	ldrb	r3, [r3, #16]
 800036a:	f043 0302 	orr.w	r3, r3, #2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	741a      	strb	r2, [r3, #16]
	}

	NRF905_HW_SPI_DESELECT(dev->hw);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2201      	movs	r2, #1
 800037a:	2106      	movs	r1, #6
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f89b 	bl	80004b8 <NRF905_hw_gpio_set>

	NRF905_HW_POWER_DOWN(dev->hw);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f894 	bl	80004b8 <NRF905_hw_gpio_set>
	NRF905_HW_STANDBY_ENTER(hw);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	6838      	ldr	r0, [r7, #0]
 8000396:	f000 f88f 	bl	80004b8 <NRF905_hw_gpio_set>
	NRF905_HW_MODE_RX(hw);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	6838      	ldr	r0, [r7, #0]
 80003a0:	f000 f88a 	bl	80004b8 <NRF905_hw_gpio_set>
	NRF905_hw_delay_ms(dev->hw, 3);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2103      	movs	r1, #3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f8b3 	bl	8000516 <NRF905_hw_delay_ms>

	// Set control registers
	NRF905_HW_SPI_SELECT(dev->hw);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	2106      	movs	r1, #6
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f87d 	bl	80004b8 <NRF905_hw_gpio_set>
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_CONFIG | 0x00, NULL);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f908 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	e00b      	b.n	80003ea <NRF905_init+0xd6>
		NRF905_hw_spi_transfer(dev->hw, NRF905_default_config[i], NULL);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6818      	ldr	r0, [r3, #0]
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	4a36      	ldr	r2, [pc, #216]	; (80004b4 <NRF905_init+0x1a0>)
 80003da:	5cd3      	ldrb	r3, [r2, r3]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f000 f8fc 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < sizeof(NRF905_default_config); i++) {
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	3301      	adds	r3, #1
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	d9f0      	bls.n	80003d2 <NRF905_init+0xbe>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2201      	movs	r2, #1
 80003f6:	2106      	movs	r1, #6
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f85d 	bl	80004b8 <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2164      	movs	r1, #100	; 0x64
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f892 	bl	800052e <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	2106      	movs	r1, #6
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f850 	bl	80004b8 <NRF905_hw_gpio_set>
	// Default transmit address
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_ADDRESS, NULL);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	2122      	movs	r1, #34	; 0x22
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f8db 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
 800042a:	e009      	b.n	8000440 <NRF905_init+0x12c>
		NRF905_hw_spi_transfer(dev->hw, 0xE7, NULL);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2200      	movs	r2, #0
 8000432:	21e7      	movs	r1, #231	; 0xe7
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f8d1 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < 4; i++) {
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	3301      	adds	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d9f2      	bls.n	800042c <NRF905_init+0x118>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2201      	movs	r2, #1
 800044c:	2106      	movs	r1, #6
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f832 	bl	80004b8 <NRF905_hw_gpio_set>

	NRF905_hw_delay_us(dev->hw, 100);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2164      	movs	r1, #100	; 0x64
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f867 	bl	800052e <NRF905_hw_delay_us>

	NRF905_HW_SPI_SELECT(dev->hw);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	2106      	movs	r1, #6
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f825 	bl	80004b8 <NRF905_hw_gpio_set>
	// Clear transmit payload
	NRF905_hw_spi_transfer(dev->hw, NRF905_CMD_W_TX_PAYLOAD, NULL);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f8b0 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e009      	b.n	8000496 <NRF905_init+0x182>
		NRF905_hw_spi_transfer(dev->hw, 0x00, NULL);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f8a6 	bl	80005dc <NRF905_hw_spi_transfer>
	for (i = 0; i < NRF905_MAX_PAYLOAD; i++) {
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	3301      	adds	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b1f      	cmp	r3, #31
 800049a:	d9f2      	bls.n	8000482 <NRF905_init+0x16e>
	}
	NRF905_HW_SPI_DESELECT(dev->hw);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2201      	movs	r2, #1
 80004a2:	2106      	movs	r1, #6
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f807 	bl	80004b8 <NRF905_hw_gpio_set>

	return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	0800611c 	.word	0x0800611c

080004b8 <NRF905_hw_gpio_set>:
	}

	return -3;
}

int NRF905_hw_gpio_set(NRF905_hw_t *hw, uint8_t gpio, uint8_t value) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 80004c4:	4613      	mov	r3, r2
 80004c6:	70bb      	strb	r3, [r7, #2]
	if (hw == NULL) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d102      	bne.n	80004d4 <NRF905_hw_gpio_set+0x1c>
		return -1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	e01c      	b.n	800050e <NRF905_hw_gpio_set+0x56>
	}

	if (gpio >= 0 && gpio <= 6) {
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b06      	cmp	r3, #6
 80004d8:	d818      	bhi.n	800050c <NRF905_hw_gpio_set+0x54>
		if (hw->gpio[gpio].port) {
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	4413      	add	r3, r2
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00e      	beq.n	8000506 <NRF905_hw_gpio_set+0x4e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	4413      	add	r3, r2
 80004f0:	6858      	ldr	r0, [r3, #4]
					hw->gpio[gpio].pin, value);
 80004f2:	78fa      	ldrb	r2, [r7, #3]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			HAL_GPIO_WritePin((GPIO_TypeDef*) hw->gpio[gpio].port,
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	78ba      	ldrb	r2, [r7, #2]
 80004fe:	4619      	mov	r1, r3
 8000500:	f001 f9dc 	bl	80018bc <HAL_GPIO_WritePin>
 8000504:	e002      	b.n	800050c <NRF905_hw_gpio_set+0x54>
		} else {
			return -2;
 8000506:	f06f 0301 	mvn.w	r3, #1
 800050a:	e000      	b.n	800050e <NRF905_hw_gpio_set+0x56>
		}
	}

	return 0;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <NRF905_hw_delay_ms>:

void NRF905_hw_delay_ms(NRF905_hw_t *hw, uint32_t ms) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
	HAL_Delay(ms);
 8000520:	6838      	ldr	r0, [r7, #0]
 8000522:	f000 fec5 	bl	80012b0 <HAL_Delay>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <NRF905_hw_delay_us>:

void NRF905_hw_delay_us(NRF905_hw_t *hw, uint16_t delay) {
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	807b      	strh	r3, [r7, #2]
	if (hw->tim != NULL) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053e:	2b00      	cmp	r3, #0
 8000540:	d029      	beq.n	8000596 <NRF905_hw_delay_us+0x68>
		volatile uint16_t current_time, stop_time;
		current_time = __HAL_TIM_GET_COUNTER((TIM_HandleTypeDef* ) (hw->tim));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054a:	b29b      	uxth	r3, r3
 800054c:	81fb      	strh	r3, [r7, #14]
		stop_time = current_time + delay;
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	b29a      	uxth	r2, r3
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	4413      	add	r3, r2
 8000556:	b29b      	uxth	r3, r3
 8000558:	81bb      	strh	r3, [r7, #12]

		//overflow
		if (stop_time < current_time) {
 800055a:	89bb      	ldrh	r3, [r7, #12]
 800055c:	b29a      	uxth	r2, r3
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	b29b      	uxth	r3, r3
 8000562:	429a      	cmp	r2, r3
 8000564:	d20b      	bcs.n	800057e <NRF905_hw_delay_us+0x50>
			do {
				current_time = __HAL_TIM_GET_COUNTER(
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	b29b      	uxth	r3, r3
 8000570:	81fb      	strh	r3, [r7, #14]
						(TIM_HandleTypeDef* ) (hw->tim));
			} while (current_time > stop_time);
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	b29a      	uxth	r2, r3
 8000576:	89bb      	ldrh	r3, [r7, #12]
 8000578:	b29b      	uxth	r3, r3
 800057a:	429a      	cmp	r2, r3
 800057c:	d8f3      	bhi.n	8000566 <NRF905_hw_delay_us+0x38>
		}

		do {
			current_time = __HAL_TIM_GET_COUNTER(
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000586:	b29b      	uxth	r3, r3
 8000588:	81fb      	strh	r3, [r7, #14]
					(TIM_HandleTypeDef* ) (hw->tim));
		} while (current_time < stop_time);
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	b29a      	uxth	r2, r3
 800058e:	89bb      	ldrh	r3, [r7, #12]
 8000590:	b29b      	uxth	r3, r3
 8000592:	429a      	cmp	r2, r3
 8000594:	d3f3      	bcc.n	800057e <NRF905_hw_delay_us+0x50>
	}
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <NRF905_hw_enable_timer>:

void NRF905_hw_enable_timer(NRF905_hw_t *hw) {
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	if (hw->tim != NULL) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00e      	beq.n	80005d0 <NRF905_hw_enable_timer+0x2e>
		__HAL_TIM_SET_COUNTER((TIM_HandleTypeDef* )(hw->tim), 0);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE((TIM_HandleTypeDef* )hw->tim);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f042 0201 	orr.w	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
	}
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <NRF905_hw_spi_transfer>:

int NRF905_hw_spi_transfer(NRF905_hw_t *hw, uint8_t data_tx, uint8_t *data_rx) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	460b      	mov	r3, r1
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	72fb      	strb	r3, [r7, #11]
	uint8_t dummy;
	int ret;

	if (hw == NULL) {
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <NRF905_hw_spi_transfer+0x1a>
		return -1;
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	e012      	b.n	800061c <NRF905_hw_spi_transfer+0x40>
	}

	if (data_rx == NULL) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <NRF905_hw_spi_transfer+0x26>
		data_rx = &dummy;
 80005fc:	f107 0313 	add.w	r3, r7, #19
 8000600:	607b      	str	r3, [r7, #4]
	}

	ret = HAL_SPI_TransmitReceive((SPI_HandleTypeDef*) hw->spi, &data_tx,
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000606:	f107 010b 	add.w	r1, r7, #11
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	f003 f832 	bl	800367a <HAL_SPI_TransmitReceive>
 8000616:	4603      	mov	r3, r0
 8000618:	617b      	str	r3, [r7, #20]
			data_rx, 1, 100);

	return ret;
 800061a:	697b      	ldr	r3, [r7, #20]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <MX_GPIO_Init+0x190>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a5d      	ldr	r2, [pc, #372]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a57      	ldr	r2, [pc, #348]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <MX_GPIO_Init+0x190>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a51      	ldr	r2, [pc, #324]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a4b      	ldr	r2, [pc, #300]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x190>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <MX_GPIO_Init+0x190>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a45      	ldr	r2, [pc, #276]	; (80007b4 <MX_GPIO_Init+0x190>)
 80006a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b43      	ldr	r3, [pc, #268]	; (80007b4 <MX_GPIO_Init+0x190>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <MX_GPIO_Init+0x190>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a3f      	ldr	r2, [pc, #252]	; (80007b4 <MX_GPIO_Init+0x190>)
 80006b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <MX_GPIO_Init+0x190>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ca:	2200      	movs	r2, #0
 80006cc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006d0:	4839      	ldr	r0, [pc, #228]	; (80007b8 <MX_GPIO_Init+0x194>)
 80006d2:	f001 f8f3 	bl	80018bc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006dc:	4837      	ldr	r0, [pc, #220]	; (80007bc <MX_GPIO_Init+0x198>)
 80006de:	f001 f8ed 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <MX_GPIO_Init+0x19c>)
 80006e8:	f001 f8e8 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006ec:	2337      	movs	r3, #55	; 0x37
 80006ee:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	482d      	ldr	r0, [pc, #180]	; (80007b8 <MX_GPIO_Init+0x194>)
 8000702:	f000 ff49 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000706:	f64f 7308 	movw	r3, #65288	; 0xff08
 800070a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <MX_GPIO_Init+0x194>)
 8000720:	f000 ff3a 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f000 ff2d 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	481a      	ldr	r0, [pc, #104]	; (80007bc <MX_GPIO_Init+0x198>)
 8000754:	f000 ff20 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000758:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4812      	ldr	r0, [pc, #72]	; (80007bc <MX_GPIO_Init+0x198>)
 8000772:	f000 ff11 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000776:	2320      	movs	r3, #32
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_GPIO_Init+0x19c>)
 800078a:	f000 ff05 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x19c>)
 80007a6:	f000 fef7 	bl	8001598 <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	; 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48001000 	.word	0x48001000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48000c00 	.word	0x48000c00

080007c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f001 f874 	bl	80018ec <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 f9d1 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f001 f8fa 	bl	8001a0a <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f9c8 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f001 f93c 	bl	8001aa0 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f9bf 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000008c 	.word	0x2000008c
 800083c:	40005400 	.word	0x40005400
 8000840:	2000090e 	.word	0x2000090e

08000844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_I2C_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d127      	bne.n	80008b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 800086c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800087e:	23c0      	movs	r3, #192	; 0xc0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	2312      	movs	r3, #18
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088e:	2304      	movs	r3, #4
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_I2C_MspInit+0x84>)
 800089a:	f000 fe7d 	bl	8001598 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_I2C_MspInit+0x80>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d013      	beq.n	800090c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00b      	beq.n	800090c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008f4:	e000      	b.n	80008f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000902:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29a      	uxth	r2, r3
 800092c:	2332      	movs	r3, #50	; 0x32
 800092e:	68b9      	ldr	r1, [r7, #8]
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <_write+0x48>)
 8000932:	f003 fe61 	bl	80045f8 <HAL_UART_Transmit>
	for (int i = 0; i < len; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e009      	b.n	8000950 <_write+0x34>
		ITM_SendChar(*ptr++);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffc1 	bl	80008cc <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <_write+0x20>
	}
	return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001f4 	.word	0x200001f4

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fc39 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f8b7 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f7ff fe55 	bl	8000624 <MX_GPIO_Init>
  MX_I2C1_Init();
 800097a:	f7ff ff23 	bl	80007c4 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 800097e:	f000 fba1 	bl	80010c4 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000982:	f000 fb2d 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000986:	f000 f919 	bl	8000bbc <MX_SPI3_Init>
  MX_TIM1_Init();
 800098a:	f000 fab5 	bl	8000ef8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	uint32_t uid = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 3; ++i) {
 8000992:	2300      	movs	r3, #0
 8000994:	70fb      	strb	r3, [r7, #3]
 8000996:	e00c      	b.n	80009b2 <main+0x4a>
		uid += *(uint32_t*) (UID_BASE + i * 4);
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80009a0:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 3; ++i) {
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	3301      	adds	r3, #1
 80009b0:	70fb      	strb	r3, [r7, #3]
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d9ef      	bls.n	8000998 <main+0x30>
	}
	srand(uid);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f004 fb75 	bl	80050a8 <srand>

	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].pin = GPIO_PIN_15;
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <main+0x144>)
 80009c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009c4:	601a      	str	r2, [r3, #0]
	NRF905_hw.gpio[NRF905_HW_GPIO_TXEN].port = GPIOB;
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <main+0x144>)
 80009c8:	4a39      	ldr	r2, [pc, #228]	; (8000ab0 <main+0x148>)
 80009ca:	605a      	str	r2, [r3, #4]
	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].pin = GPIO_PIN_13;
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <main+0x144>)
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	609a      	str	r2, [r3, #8]
	NRF905_hw.gpio[NRF905_HW_GPIO_TRX_EN].port = GPIOB;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <main+0x144>)
 80009d6:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <main+0x148>)
 80009d8:	60da      	str	r2, [r3, #12]
	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].pin = GPIO_PIN_14;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <main+0x144>)
 80009dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e0:	611a      	str	r2, [r3, #16]
	NRF905_hw.gpio[NRF905_HW_GPIO_PWR].port = GPIOB;
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <main+0x144>)
 80009e4:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <main+0x148>)
 80009e6:	615a      	str	r2, [r3, #20]

	NRF905_hw.gpio[NRF905_HW_GPIO_CD].pin = GPIO_PIN_12;
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <main+0x144>)
 80009ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ee:	619a      	str	r2, [r3, #24]
	NRF905_hw.gpio[NRF905_HW_GPIO_CD].port = GPIOB;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <main+0x144>)
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <main+0x148>)
 80009f4:	61da      	str	r2, [r3, #28]
	NRF905_hw.gpio[NRF905_HW_GPIO_AM].pin = 0;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <main+0x144>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
	NRF905_hw.gpio[NRF905_HW_GPIO_AM].port = NULL;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <main+0x144>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
	NRF905_hw.gpio[NRF905_HW_GPIO_DR].pin = 0;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <main+0x144>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
	NRF905_hw.gpio[NRF905_HW_GPIO_DR].port = NULL;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <main+0x144>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c

	NRF905_hw.gpio[NRF905_HW_GPIO_CS].pin = GPIO_PIN_3;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <main+0x144>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
	NRF905_hw.gpio[NRF905_HW_GPIO_CS].port = GPIOE;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <main+0x144>)
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <main+0x14c>)
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34

	NRF905_hw.tim = &htim1;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <main+0x144>)
 8000a1c:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <main+0x150>)
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	NRF905_hw.spi = &hspi3;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <main+0x144>)
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <main+0x154>)
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38


    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <main+0x158>)
 8000a2c:	f000 ff46 	bl	80018bc <HAL_GPIO_WritePin>


	master = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <main+0x158>)
 8000a34:	f000 ff2a 	bl	800188c <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <main+0x15c>)
 8000a3e:	601a      	str	r2, [r3, #0]
//	int c = 0;


	  while (1)
	  {
			if (master >= 1) {
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <main+0x15c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	dd06      	ble.n	8000a56 <main+0xee>
				my_address = ADDRESS_MASTER;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <main+0x160>)
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <main+0x164>)
 8000a4c:	601a      	str	r2, [r3, #0]
				receiver_address = ADDRESS_SLAVE;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <main+0x168>)
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <main+0x16c>)
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e005      	b.n	8000a62 <main+0xfa>
			} else {
				my_address = ADDRESS_SLAVE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <main+0x160>)
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <main+0x16c>)
 8000a5a:	601a      	str	r2, [r3, #0]
				receiver_address = ADDRESS_MASTER;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <main+0x168>)
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <main+0x164>)
 8000a60:	601a      	str	r2, [r3, #0]
			}

			if (master >= 1) {
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0x15c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	dd09      	ble.n	8000a7e <main+0x116>
				printf("1234\r\n");
 8000a6a:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <main+0x170>)
 8000a6c:	f004 fb14 	bl	8005098 <puts>
	//	  		printf("Mode: Master, TX, %08lX\r\n", my_address);
				HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <main+0x14c>)
 8000a78:	f000 ff20 	bl	80018bc <HAL_GPIO_WritePin>
 8000a7c:	e008      	b.n	8000a90 <main+0x128>
			} else {
	//	  		printf("Mode: Slave, RX, %08lX\r\n", my_address);
				printf("1234\r\n");
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <main+0x170>)
 8000a80:	f004 fb0a 	bl	8005098 <puts>
				HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <main+0x14c>)
 8000a8c:	f000 ff16 	bl	80018bc <HAL_GPIO_WritePin>
				//HAL_SPI_Receive_IT(&hspi3, address, 1);

			}
			//for(j=length-1; j>=0; j--){ printf("%c", word[j]);

			NRF905_init(&NRF905, &NRF905_hw);
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <main+0x144>)
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <main+0x174>)
 8000a94:	f7ff fc3e 	bl	8000314 <NRF905_init>
			NRF905_set_listen_address(&NRF905, receiver_address);
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <main+0x168>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480f      	ldr	r0, [pc, #60]	; (8000adc <main+0x174>)
 8000aa0:	f7ff fc22 	bl	80002e8 <NRF905_set_listen_address>
	//	  	for (int i = 0; i < 10; ++i) {
	//	  		uint8_t d = NRF905_write_config_register(&NRF905, i, i);
	//	  //		uint8_t d = NRF905_read_config_register(&NRF905, i);
	//	  		printf("%02X, ", d);
	//	  	}
			printf("\r\n");
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <main+0x178>)
 8000aa6:	f004 faf7 	bl	8005098 <puts>
			if (master >= 1) {
 8000aaa:	e7c9      	b.n	8000a40 <main+0xd8>
 8000aac:	200000e0 	.word	0x200000e0
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	48001000 	.word	0x48001000
 8000ab8:	200001a8 	.word	0x200001a8
 8000abc:	20000140 	.word	0x20000140
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	20000134 	.word	0x20000134
 8000ac8:	20000138 	.word	0x20000138
 8000acc:	25d34478 	.word	0x25d34478
 8000ad0:	2000013c 	.word	0x2000013c
 8000ad4:	6da0c59b 	.word	0x6da0c59b
 8000ad8:	08006110 	.word	0x08006110
 8000adc:	20000120 	.word	0x20000120
 8000ae0:	08006118 	.word	0x08006118

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09e      	sub	sp, #120	; 0x78
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aee:	2228      	movs	r2, #40	; 0x28
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fa5a 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	223c      	movs	r2, #60	; 0x3c
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fa4c 	bl	8004fac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b14:	2303      	movs	r3, #3
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b22:	2301      	movs	r3, #1
 8000b24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b26:	2310      	movs	r3, #16
 8000b28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f8cc 	bl	8001cdc <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f831 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2302      	movs	r3, #2
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 f8f4 	bl	8002d58 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b76:	f000 f81b 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <SystemClock_Config+0xc8>)
 8000b7c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 fb16 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b9e:	f000 f807 	bl	8000bb0 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3778      	adds	r7, #120	; 0x78
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	00021022 	.word	0x00021022

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_SPI3_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_SPI3_Init+0x74>)
 8000c1c:	f002 fc82 	bl	8003524 <HAL_SPI_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f7ff ffc3 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000140 	.word	0x20000140
 8000c34:	40003c00 	.word	0x40003c00

08000c38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d130      	bne.n	8000cbc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */
//
  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_SPI_MspInit+0x94>)
 8000ca8:	f000 fc76 	bl	8001598 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2033      	movs	r0, #51	; 0x33
 8000cb2:	f000 fbfc 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000cb6:	2033      	movs	r0, #51	; 0x33
 8000cb8:	f000 fc15 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */
//
  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40003c00 	.word	0x40003c00
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f000 fbc6 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 fa84 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <SPI3_IRQHandler+0x10>)
 8000d72:	f002 fea5 	bl	8003ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000140 	.word	0x20000140

08000d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return 1;
 8000d84:	2301      	movs	r3, #1
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_kill>:

int _kill(int pid, int sig)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d9a:	f004 f8dd 	bl	8004f58 <__errno>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2216      	movs	r2, #22
 8000da2:	601a      	str	r2, [r3, #0]
  return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_exit>:

void _exit (int status)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffe7 	bl	8000d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc2:	e7fe      	b.n	8000dc2 <_exit+0x12>

08000dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f004 f85e 	bl	8004f58 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000a000 	.word	0x2000a000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	200001a4 	.word	0x200001a4
 8000ed0:	20000580 	.word	0x20000580

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <MX_TIM1_Init+0xa4>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f44:	f003 f840 	bl	8003fc8 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f4e:	f7ff fe2f 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f60:	f003 f889 	bl	8004076 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f7ff fe21 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_TIM1_Init+0xa0>)
 8000f80:	f003 fa6c 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f8a:	f7ff fe11 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001a8 	.word	0x200001a8
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x38>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10b      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40012c00 	.word	0x40012c00
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	f003 fa9a 	bl	800455c <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f7ff fdbf 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001f4 	.word	0x200001f4
 800103c:	40004400 	.word	0x40004400

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_UART_MspInit+0x7c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d128      	bne.n	80010b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_UART_MspInit+0x80>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_UART_MspInit+0x80>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_UART_MspInit+0x80>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_UART_MspInit+0x80>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_UART_MspInit+0x80>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_UART_MspInit+0x80>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001092:	230c      	movs	r3, #12
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a2:	2307      	movs	r3, #7
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f000 fa72 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <MX_USB_PCD_Init+0x40>)
 80010cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010d0:	2208      	movs	r2, #8
 80010d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010dc:	2202      	movs	r2, #2
 80010de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_USB_PCD_Init+0x3c>)
 80010ee:	f000 fd23 	bl	8001b38 <HAL_PCD_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80010f8:	f7ff fd5a 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000027c 	.word	0x2000027c
 8001104:	40005c00 	.word	0x40005c00

08001108 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_PCD_MspInit+0x80>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d129      	bne.n	800117e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_PCD_MspInit+0x84>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_PCD_MspInit+0x84>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6153      	str	r3, [r2, #20]
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_PCD_MspInit+0x84>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001154:	230e      	movs	r3, #14
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f000 fa19 	bl	8001598 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_PCD_MspInit+0x84>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_PCD_MspInit+0x84>)
 800116c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_PCD_MspInit+0x84>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005c00 	.word	0x40005c00
 800118c:	40021000 	.word	0x40021000

08001190 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001194:	f7ff fe9e 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopForever+0x6>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopForever+0xe>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopForever+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f003 fed1 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c2:	f7ff fbd1 	bl	8000968 <main>

080011c6 <LoopForever>:

LoopForever:
    b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d4:	080062b0 	.word	0x080062b0
  ldr r2, =_sbss
 80011d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011dc:	2000057c 	.word	0x2000057c

080011e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC1_2_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x28>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x28>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f94f 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fd66 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f967 	bl	8001502 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f92f 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	20000568 	.word	0x20000568

08001298 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;  
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000568 	.word	0x20000568

080012b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008

080012f8 <__NVIC_SetPriorityGrouping>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff3e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff31 	bl	800135c <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d005      	beq.n	800153c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e027      	b.n	800158c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020e 	bic.w	r2, r2, #14
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
    } 
  }
  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e154      	b.n	8001852 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8146 	beq.w	800184c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a0 	beq.w	800184c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b55      	ldr	r3, [pc, #340]	; (8001870 <HAL_GPIO_Init+0x2d8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001724:	4a53      	ldr	r2, [pc, #332]	; (8001874 <HAL_GPIO_Init+0x2dc>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174e:	d019      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a49      	ldr	r2, [pc, #292]	; (8001878 <HAL_GPIO_Init+0x2e0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2e4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00d      	beq.n	800177c <HAL_GPIO_Init+0x1e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a47      	ldr	r2, [pc, #284]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x1e0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a46      	ldr	r2, [pc, #280]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_GPIO_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e008      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001774:	2305      	movs	r3, #5
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001778:	2303      	movs	r3, #3
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 800177c:	2302      	movs	r3, #2
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001784:	2300      	movs	r3, #0
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001796:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_GPIO_Init+0x2dc>)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a4:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c8:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f aea3 	bne.w	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	48000400 	.word	0x48000400
 800187c:	48000800 	.word	0x48000800
 8001880:	48000c00 	.word	0x48000c00
 8001884:	48001000 	.word	0x48001000
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e081      	b.n	8001a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe ff96 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e006      	b.n	8001974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d138      	bne.n	8001a92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e032      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	; 0x24
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d139      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e033      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	b08b      	sub	sp, #44	; 0x2c
 8001b3c:	af06      	add	r7, sp, #24
 8001b3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0c4      	b.n	8001cd4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fad2 	bl	8001108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 f9b4 	bl	8004ede <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e040      	b.n	8001bfe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3338      	adds	r3, #56	; 0x38
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	333c      	adds	r3, #60	; 0x3c
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3340      	adds	r3, #64	; 0x40
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3b9      	bcc.n	8001b7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e044      	b.n	8001c98 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	3301      	adds	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3b5      	bcc.n	8001c0e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	687e      	ldr	r6, [r7, #4]
 8001caa:	466d      	mov	r5, sp
 8001cac:	f106 0410 	add.w	r4, r6, #16
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	602b      	str	r3, [r5, #0]
 8001cb8:	1d33      	adds	r3, r6, #4
 8001cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f003 f929 	bl	8004f14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f001 b823 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 817d 	beq.w	8002012 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d18:	4bbc      	ldr	r3, [pc, #752]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4bb9      	ldr	r3, [pc, #740]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d15c      	bne.n	8001dea <HAL_RCC_OscConfig+0x10e>
 8001d30:	4bb6      	ldr	r3, [pc, #728]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d155      	bne.n	8001dea <HAL_RCC_OscConfig+0x10e>
 8001d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x94>
 8001d6a:	4ba8      	ldr	r3, [pc, #672]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d98:	4b9c      	ldr	r3, [pc, #624]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001da4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001db0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 811f 	beq.w	8002010 <HAL_RCC_OscConfig+0x334>
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8116 	bne.w	8002010 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f000 bfaf 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12e>
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a82      	ldr	r2, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e036      	b.n	8001e78 <HAL_RCC_OscConfig+0x19c>
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x158>
 8001e1a:	4b7c      	ldr	r3, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7b      	ldr	r2, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b79      	ldr	r3, [pc, #484]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a78      	ldr	r2, [pc, #480]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e021      	b.n	8001e78 <HAL_RCC_OscConfig+0x19c>
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x184>
 8001e46:	4b71      	ldr	r3, [pc, #452]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a70      	ldr	r2, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6e      	ldr	r3, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6d      	ldr	r2, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0x19c>
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f023 020f 	bic.w	r2, r3, #15
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	495f      	ldr	r1, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d059      	beq.n	8001f56 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f9f9 	bl	8001298 <HAL_GetTick>
 8001ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f9f4 	bl	8001298 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d902      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f000 bf43 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 8001ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ed6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x218>
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e015      	b.n	8001f20 <HAL_RCC_OscConfig+0x244>
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f24:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ab      	beq.n	8001eac <HAL_RCC_OscConfig+0x1d0>
 8001f54:	e05d      	b.n	8002012 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff f99f 	bl	8001298 <HAL_GetTick>
 8001f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff f99a 	bl	8001298 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d902      	bls.n	8001f76 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f000 bee9 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 8001f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2cc>
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f8>
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fc4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_RCC_OscConfig+0x330>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fdc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fe0:	fa92 f2a2 	rbit	r2, r2
 8001fe4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fe8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f002 021f 	and.w	r2, r2, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ab      	bne.n	8001f60 <HAL_RCC_OscConfig+0x284>
 8002008:	e003      	b.n	8002012 <HAL_RCC_OscConfig+0x336>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 817d 	beq.w	8002322 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002028:	4ba6      	ldr	r3, [pc, #664]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002034:	4ba3      	ldr	r3, [pc, #652]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d172      	bne.n	8002126 <HAL_RCC_OscConfig+0x44a>
 8002040:	4ba0      	ldr	r3, [pc, #640]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d16c      	bne.n	8002126 <HAL_RCC_OscConfig+0x44a>
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800205e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_OscConfig+0x3a0>
 8002076:	4b93      	ldr	r3, [pc, #588]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002094:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2202      	movs	r2, #2
 80020a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f042 0220 	orr.w	r2, r2, #32
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f002 021f 	and.w	r2, r2, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCC_OscConfig+0x410>
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f000 be2e 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	21f8      	movs	r1, #248	; 0xf8
 8002102:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800210a:	fa91 f1a1 	rbit	r1, r1
 800210e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002112:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002116:	fab1 f181 	clz	r1, r1
 800211a:	b2c9      	uxtb	r1, r1
 800211c:	408b      	lsls	r3, r1
 800211e:	4969      	ldr	r1, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002124:	e0fd      	b.n	8002322 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8088 	beq.w	8002248 <HAL_RCC_OscConfig+0x56c>
 8002138:	2301      	movs	r3, #1
 800213a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800214a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002158:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	461a      	mov	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f898 	bl	8001298 <HAL_GetTick>
 8002168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff f893 	bl	8001298 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d902      	bls.n	8002184 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f000 bde2 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002196:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4d8>
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x500>
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2202      	movs	r2, #2
 80021de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021e6:	fa92 f2a2 	rbit	r2, r2
 80021ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0af      	beq.n	800216e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	21f8      	movs	r1, #248	; 0xf8
 8002224:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800222c:	fa91 f1a1 	rbit	r1, r1
 8002230:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002234:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002238:	fab1 f181 	clz	r1, r1
 800223c:	b2c9      	uxtb	r1, r1
 800223e:	408b      	lsls	r3, r1
 8002240:	4920      	ldr	r1, [pc, #128]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
 8002246:	e06c      	b.n	8002322 <HAL_RCC_OscConfig+0x646>
 8002248:	2301      	movs	r3, #1
 800224a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800225a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002268:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	461a      	mov	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f810 	bl	8001298 <HAL_GetTick>
 8002278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff f80b 	bl	8001298 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d902      	bls.n	8002294 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	f000 bd5a 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d104      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5ec>
 80022be:	4b01      	ldr	r3, [pc, #4]	; (80022c4 <HAL_RCC_OscConfig+0x5e8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e015      	b.n	80022f0 <HAL_RCC_OscConfig+0x614>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022ec:	4bc8      	ldr	r3, [pc, #800]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2202      	movs	r2, #2
 80022f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002302:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002306:	fab2 f282 	clz	r2, r2
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f042 0220 	orr.w	r2, r2, #32
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f002 021f 	and.w	r2, r2, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ad      	bne.n	800227e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8110 	beq.w	8002558 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d079      	beq.n	800243c <HAL_RCC_OscConfig+0x760>
 8002348:	2301      	movs	r3, #1
 800234a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800235a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	4bab      	ldr	r3, [pc, #684]	; (8002614 <HAL_RCC_OscConfig+0x938>)
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7fe ff91 	bl	8001298 <HAL_GetTick>
 8002376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe ff8c 	bl	8001298 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d902      	bls.n	8002392 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	f000 bcdb 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023d0:	2202      	movs	r2, #2
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 80023ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023f8:	2102      	movs	r1, #2
 80023fa:	6019      	str	r1, [r3, #0]
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f1a3 	rbit	r1, r3
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002412:	6019      	str	r1, [r3, #0]
  return result;
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0a0      	beq.n	800237c <HAL_RCC_OscConfig+0x6a0>
 800243a:	e08d      	b.n	8002558 <HAL_RCC_OscConfig+0x87c>
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800245e:	601a      	str	r2, [r3, #0]
  return result;
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002468:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x938>)
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	2300      	movs	r3, #0
 800247c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe ff0b 	bl	8001298 <HAL_GetTick>
 8002482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe ff06 	bl	8001298 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bc55 	b.w	8002d48 <HAL_RCC_OscConfig+0x106c>
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024a6:	2202      	movs	r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002508:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002516:	2102      	movs	r1, #2
 8002518:	6019      	str	r1, [r3, #0]
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f1a3 	rbit	r1, r3
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002530:	6019      	str	r1, [r3, #0]
  return result;
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d197      	bne.n	8002488 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 81a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d116      	bne.n	80025ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	61d3      	str	r3, [r2, #28]
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x93c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11a      	bne.n	80025f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCC_OscConfig+0x93c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_OscConfig+0x93c>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fe67 	bl	8001298 <HAL_GetTick>
 80025ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe fe62 	bl	8001298 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e3b1      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x93c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_OscConfig+0x940>
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a02      	ldr	r2, [pc, #8]	; (8002610 <HAL_RCC_OscConfig+0x934>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e03c      	b.n	8002688 <HAL_RCC_OscConfig+0x9ac>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	10908120 	.word	0x10908120
 8002618:	40007000 	.word	0x40007000
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10c      	bne.n	8002646 <HAL_RCC_OscConfig+0x96a>
 800262c:	4bc1      	ldr	r3, [pc, #772]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4ac0      	ldr	r2, [pc, #768]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	4bbe      	ldr	r3, [pc, #760]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4abd      	ldr	r2, [pc, #756]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800263e:	f023 0304 	bic.w	r3, r3, #4
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	e020      	b.n	8002688 <HAL_RCC_OscConfig+0x9ac>
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x994>
 8002656:	4bb7      	ldr	r3, [pc, #732]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4ab6      	ldr	r2, [pc, #728]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4bb4      	ldr	r3, [pc, #720]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4ab3      	ldr	r2, [pc, #716]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x9ac>
 8002670:	4bb0      	ldr	r3, [pc, #704]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4aaf      	ldr	r2, [pc, #700]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4bad      	ldr	r3, [pc, #692]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4aac      	ldr	r2, [pc, #688]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8081 	beq.w	800279c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7fe fdfd 	bl	8001298 <HAL_GetTick>
 800269e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe fdf8 	bl	8001298 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e345      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002702:	601a      	str	r2, [r3, #0]
  return result;
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800270c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0xa4c>
 8002722:	4b84      	ldr	r3, [pc, #528]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0xa74>
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002758:	2102      	movs	r1, #2
 800275a:	6011      	str	r1, [r2, #0]
 800275c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002760:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fa92 f1a2 	rbit	r1, r2
 800276a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002772:	6011      	str	r1, [r2, #0]
  return result;
 8002774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002778:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d084      	beq.n	80026a4 <HAL_RCC_OscConfig+0x9c8>
 800279a:	e07f      	b.n	800289c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fd7c 	bl	8001298 <HAL_GetTick>
 80027a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fd77 	bl	8001298 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2c4      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027ea:	2202      	movs	r2, #2
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002804:	601a      	str	r2, [r3, #0]
  return result;
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800280e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0xb4e>
 8002824:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	e013      	b.n	8002852 <HAL_RCC_OscConfig+0xb76>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002832:	2202      	movs	r2, #2
 8002834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800285a:	2102      	movs	r1, #2
 800285c:	6011      	str	r1, [r2, #0]
 800285e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002862:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fa92 f1a2 	rbit	r1, r2
 800286c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002870:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002874:	6011      	str	r1, [r2, #0]
  return result;
 8002876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d184      	bne.n	80027a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8242 	beq.w	8002d46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_RCC_OscConfig+0xc58>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	f000 8213 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	f040 8162 	bne.w	8002ba6 <HAL_RCC_OscConfig+0xeca>
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002906:	601a      	str	r2, [r3, #0]
  return result;
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002910:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800291c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	461a      	mov	r2, r3
 8002924:	2300      	movs	r3, #0
 8002926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe fcb6 	bl	8001298 <HAL_GetTick>
 800292c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002930:	e00c      	b.n	800294c <HAL_RCC_OscConfig+0xc70>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fcae 	bl	8001298 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1fd      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002970:	601a      	str	r2, [r3, #0]
  return result;
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800297a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0xcba>
 8002990:	4bb0      	ldr	r3, [pc, #704]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e027      	b.n	80029e6 <HAL_RCC_OscConfig+0xd0a>
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800299e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	4b9c      	ldr	r3, [pc, #624]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029f2:	6011      	str	r1, [r2, #0]
 80029f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	fa92 f1a2 	rbit	r1, r2
 8002a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a06:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a0a:	6011      	str	r1, [r2, #0]
  return result;
 8002a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a10:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d182      	bne.n	8002938 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	497f      	ldr	r1, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a7e:	601a      	str	r2, [r3, #0]
  return result;
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a88:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fbfa 	bl	8001298 <HAL_GetTick>
 8002aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa8:	e009      	b.n	8002abe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe fbf5 	bl	8001298 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e144      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0xe2c>
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e027      	b.n	8002b58 <HAL_RCC_OscConfig+0xe7c>
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	fa92 f1a2 	rbit	r1, r2
 8002b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b7c:	6011      	str	r1, [r2, #0]
  return result;
 8002b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fab2 f282 	clz	r2, r2
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f042 0220 	orr.w	r2, r2, #32
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f002 021f 	and.w	r2, r2, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d082      	beq.n	8002aaa <HAL_RCC_OscConfig+0xdce>
 8002ba4:	e0cf      	b.n	8002d46 <HAL_RCC_OscConfig+0x106a>
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bca:	601a      	str	r2, [r3, #0]
  return result;
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	2300      	movs	r3, #0
 8002bea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fb54 	bl	8001298 <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fb4f 	bl	8001298 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e09e      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d104      	bne.n	8002c58 <HAL_RCC_OscConfig+0xf7c>
 8002c4e:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <HAL_RCC_OscConfig+0xf78>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e029      	b.n	8002ca8 <HAL_RCC_OscConfig+0xfcc>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_OscConfig+0x1078>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cb4:	6011      	str	r1, [r2, #0]
 8002cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	fa92 f1a2 	rbit	r1, r2
 8002cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ccc:	6011      	str	r1, [r2, #0]
  return result;
 8002cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f002 021f 	and.w	r2, r2, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d180      	bne.n	8002bf6 <HAL_RCC_OscConfig+0xf1a>
 8002cf4:	e027      	b.n	8002d46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e01e      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x1078>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b09e      	sub	sp, #120	; 0x78
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e162      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b90      	ldr	r3, [pc, #576]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	498b      	ldr	r1, [pc, #556]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e14a      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	497f      	ldr	r1, [pc, #508]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80dc 	beq.w	8002f84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d13c      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xf6>
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xa6>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCC_ClockConfig+0xc6>
 8002dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e10:	663b      	str	r3, [r7, #96]	; 0x60
 8002e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e1a:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e22:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e2e:	fab2 f282 	clz	r2, r2
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	f042 0220 	orr.w	r2, r2, #32
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f002 021f 	and.w	r2, r2, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d17b      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0f3      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d13c      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x178>
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x128>
 8002e7a:	4b4f      	ldr	r3, [pc, #316]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e00f      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
 8002e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
 8002e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea8:	fa92 f2a2 	rbit	r2, r2
 8002eac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d13a      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b2      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
 8002ef2:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e00d      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1bc>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	2302      	movs	r3, #2
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2202      	movs	r2, #2
 8002f16:	61ba      	str	r2, [r7, #24]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	fa92 f2a2 	rbit	r2, r2
 8002f1e:	617a      	str	r2, [r7, #20]
  return result;
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e079      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	491a      	ldr	r1, [pc, #104]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f9a0 	bl	8001298 <HAL_GetTick>
 8002f58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe f99c 	bl	8001298 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e061      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d214      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e040      	b.n	8003036 <HAL_RCC_ClockConfig+0x2de>
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_ClockConfig+0x2e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	491a      	ldr	r1, [pc, #104]	; (8003040 <HAL_RCC_ClockConfig+0x2e8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x2e8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4912      	ldr	r1, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ffa:	f000 f829 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_RCC_ClockConfig+0x2e8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003008:	22f0      	movs	r2, #240	; 0xf0
 800300a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	60fa      	str	r2, [r7, #12]
  return result;
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	40d3      	lsrs	r3, r2
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x2ec>)
 8003020:	5cd3      	ldrb	r3, [r2, r3]
 8003022:	fa21 f303 	lsr.w	r3, r1, r3
 8003026:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_RCC_ClockConfig+0x2f0>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_RCC_ClockConfig+0x2f4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f8ee 	bl	8001210 <HAL_InitTick>
  
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3778      	adds	r7, #120	; 0x78
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	08006128 	.word	0x08006128
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b08b      	sub	sp, #44	; 0x2c
 8003054:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_RCC_GetSysClockFreq+0xc0>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x30>
 800307a:	2b08      	cmp	r3, #8
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x36>
 800307e:	e03c      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003082:	623b      	str	r3, [r7, #32]
      break;
 8003084:	e03c      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800308c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003090:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	fa92 f2a2 	rbit	r2, r2
 8003098:	607a      	str	r2, [r7, #4]
  return result;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	40d3      	lsrs	r3, r2
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	220f      	movs	r2, #15
 80030b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	fa92 f2a2 	rbit	r2, r2
 80030bc:	60fa      	str	r2, [r7, #12]
  return result;
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	40d3      	lsrs	r3, r2
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_RCC_GetSysClockFreq+0xcc>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030d8:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	e004      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	623b      	str	r3, [r7, #32]
      break;
 80030f8:	e002      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030fc:	623b      	str	r3, [r7, #32]
      break;
 80030fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003100:	6a3b      	ldr	r3, [r7, #32]
}
 8003102:	4618      	mov	r0, r3
 8003104:	372c      	adds	r7, #44	; 0x2c
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	007a1200 	.word	0x007a1200
 8003118:	08006140 	.word	0x08006140
 800311c:	08006150 	.word	0x08006150
 8003120:	003d0900 	.word	0x003d0900

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003142:	f7ff ffef 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003146:	4601      	mov	r1, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003150:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003154:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	fa92 f2a2 	rbit	r2, r2
 800315c:	603a      	str	r2, [r7, #0]
  return result;
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	40d3      	lsrs	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <HAL_RCC_GetPCLK1Freq+0x40>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	08006138 	.word	0x08006138

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003186:	f7ff ffcd 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800318a:	4601      	mov	r1, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003194:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	603a      	str	r2, [r7, #0]
  return result;
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	40d3      	lsrs	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08006138 	.word	0x08006138

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b092      	sub	sp, #72	; 0x48
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80d4 	beq.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10e      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	61d3      	str	r3, [r2, #28]
 8003200:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b45      	ldr	r3, [pc, #276]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a41      	ldr	r2, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fe f835 	bl	8001298 <HAL_GetTick>
 800322e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fe f831 	bl	8001298 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e169      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b38      	ldr	r3, [pc, #224]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800325a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8084 	beq.w	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800326c:	429a      	cmp	r2, r3
 800326e:	d07c      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	461a      	mov	r2, r3
 800329a:	2301      	movs	r3, #1
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	461a      	mov	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd ffe1 	bl	8001298 <HAL_GetTick>
 80032d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd ffdd 	bl	8001298 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e113      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032f0:	2302      	movs	r3, #2
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	61fb      	str	r3, [r7, #28]
  return result;
 8003308:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d108      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800331e:	4b01      	ldr	r3, [pc, #4]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	e00d      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	10908100 	.word	0x10908100
 8003330:	2302      	movs	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	4b78      	ldr	r3, [pc, #480]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2202      	movs	r2, #2
 8003342:	613a      	str	r2, [r7, #16]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	fa92 f2a2 	rbit	r2, r2
 800334a:	60fa      	str	r2, [r7, #12]
  return result;
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0b7      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	496a      	ldr	r1, [pc, #424]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800337c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339c:	4b60      	ldr	r3, [pc, #384]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	495d      	ldr	r1, [pc, #372]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4956      	ldr	r1, [pc, #344]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	494e      	ldr	r1, [pc, #312]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033f6:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f023 0210 	bic.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4947      	ldr	r1, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	493f      	ldr	r1, [pc, #252]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f023 0220 	bic.w	r2, r3, #32
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4938      	ldr	r1, [pc, #224]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	4930      	ldr	r1, [pc, #192]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	4929      	ldr	r1, [pc, #164]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	4921      	ldr	r1, [pc, #132]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	491a      	ldr	r1, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	4912      	ldr	r1, [pc, #72]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	490b      	ldr	r1, [pc, #44]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3748      	adds	r7, #72	; 0x48
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000

08003524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e09d      	b.n	8003672 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003546:	d009      	beq.n	800355c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
 800354e:	e005      	b.n	800355c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fb5e 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800359c:	d902      	bls.n	80035a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e002      	b.n	80035aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_Init+0xa0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	ea42 0103 	orr.w	r1, r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	f003 0204 	and.w	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	; 0x28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x26>
 800369c:	2302      	movs	r3, #2
 800369e:	e20a      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x43c>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a8:	f7fd fdf6 	bl	8001298 <HAL_GetTick>
 80036ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c4:	7efb      	ldrb	r3, [r7, #27]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00e      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x6e>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d0:	d106      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x66>
 80036da:	7efb      	ldrb	r3, [r7, #27]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d003      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036e6:	e1e0      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x80>
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003700:	e1d3      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	887a      	ldrh	r2, [r7, #2]
 8003726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003758:	d802      	bhi.n	8003760 <HAL_SPI_TransmitReceive+0xe6>
 800375a:	8a3b      	ldrh	r3, [r7, #16]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d908      	bls.n	8003772 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	e007      	b.n	8003782 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003780:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d007      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a8:	f240 8081 	bls.w	80038ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x140>
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d16d      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	e05a      	b.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d11b      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d113      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11c      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1f4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	b292      	uxth	r2, r2
 800384c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800386e:	f7fd fd13 	bl	8001298 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	429a      	cmp	r2, r3
 800387c:	d80b      	bhi.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d007      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003894:	e109      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19f      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x166>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d199      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x166>
 80038ac:	e0e3      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_SPI_TransmitReceive+0x244>
 80038b6:	8a7b      	ldrh	r3, [r7, #18]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80cf 	bne.w	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d912      	bls.n	80038ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b02      	subs	r3, #2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ec:	e0b6      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003914:	e0a2      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d134      	bne.n	800398e <HAL_SPI_TransmitReceive+0x314>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02f      	beq.n	800398e <HAL_SPI_TransmitReceive+0x314>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12c      	bne.n	800398e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d912      	bls.n	8003964 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b02      	subs	r3, #2
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003962:	e012      	b.n	800398a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d148      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x3b4>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d042      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d923      	bls.n	80039fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	b292      	uxth	r2, r2
 80039c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b02      	subs	r3, #2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d81f      	bhi.n	8003a2a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e016      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f103 020c 	add.w	r2, r3, #12
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a2e:	f7fd fc33 	bl	8001298 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d803      	bhi.n	8003a46 <HAL_SPI_TransmitReceive+0x3cc>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x3d2>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003a5a:	e026      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f af57 	bne.w	8003916 <HAL_SPI_TransmitReceive+0x29c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af50 	bne.w	8003916 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa5e 	bl	8003f3c <SPI_EndRxTxTransaction>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa0:	e003      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3728      	adds	r7, #40	; 0x28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10f      	bne.n	8003b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
    return;
 8003b02:	e0d7      	b.n	8003cb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_SPI_IRQHandler+0x66>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	09db      	lsrs	r3, r3, #7
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
    return;
 8003b24:	e0c6      	b.n	8003cb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_SPI_IRQHandler+0x8c>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80b4 	beq.w	8003cb4 <HAL_SPI_IRQHandler+0x1f4>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80ad 	beq.w	8003cb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d011      	beq.n	8003b96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	f043 0204 	orr.w	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	e00b      	b.n	8003bae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
        return;
 8003bac:	e082      	b.n	8003cb4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d014      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00c      	beq.n	8003c0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	f043 0208 	orr.w	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04f      	beq.n	8003cb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_SPI_IRQHandler+0x17e>
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d034      	beq.n	8003ca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0203 	bic.w	r2, r2, #3
 8003c4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_SPI_IRQHandler+0x1fc>)
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fc59 	bl	800151a <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_SPI_IRQHandler+0x1fc>)
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fc43 	bl	800151a <HAL_DMA_Abort_IT>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003ca6:	e003      	b.n	8003cb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f809 	bl	8003cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cae:	e000      	b.n	8003cb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003cb0:	bf00      	nop
    return;
 8003cb2:	bf00      	nop
  }
}
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08003cd5 	.word	0x08003cd5

08003cc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ffe5 	bl	8003cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d10:	f7fd fac2 	bl	8001298 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d20:	f7fd faba 	bl	8001298 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	015b      	lsls	r3, r3, #5
 8003d2c:	0d1b      	lsrs	r3, r3, #20
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d36:	e054      	b.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d050      	beq.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d40:	f7fd faaa 	bl	8001298 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d902      	bls.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d13d      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d111      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d004      	beq.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d107      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	d10f      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e017      	b.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d19b      	bne.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000

08003e10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e22:	f7fd fa39 	bl	8001298 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e32:	f7fd fa31 	bl	8001298 <HAL_GetTick>
 8003e36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e40:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00da      	lsls	r2, r3, #3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	0d1b      	lsrs	r3, r3, #20
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e58:	e060      	b.n	8003f1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e60:	d107      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d050      	beq.n	8003f1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e7a:	f7fd fa0d 	bl	8001298 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d902      	bls.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d13d      	bne.n	8003f0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea8:	d111      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb2:	d004      	beq.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d107      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d10f      	bne.n	8003ef8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e010      	b.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d196      	bne.n	8003e5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3728      	adds	r7, #40	; 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000000 	.word	0x20000000

08003f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff5b 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e027      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff fec0 	bl	8003d00 <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e014      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff34 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e000      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e049      	b.n	800406e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc ffd6 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 f8fe 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_TIM_ConfigClockSource+0x1c>
 800408e:	2302      	movs	r3, #2
 8004090:	e0b6      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x18a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	d03e      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xd8>
 80040d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d4:	f200 8087 	bhi.w	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	f000 8086 	beq.w	80041ec <HAL_TIM_ConfigClockSource+0x176>
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e4:	d87f      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 80040e6:	2b70      	cmp	r3, #112	; 0x70
 80040e8:	d01a      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xaa>
 80040ea:	2b70      	cmp	r3, #112	; 0x70
 80040ec:	d87b      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 80040ee:	2b60      	cmp	r3, #96	; 0x60
 80040f0:	d050      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0x11e>
 80040f2:	2b60      	cmp	r3, #96	; 0x60
 80040f4:	d877      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 80040f6:	2b50      	cmp	r3, #80	; 0x50
 80040f8:	d03c      	beq.n	8004174 <HAL_TIM_ConfigClockSource+0xfe>
 80040fa:	2b50      	cmp	r3, #80	; 0x50
 80040fc:	d873      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d058      	beq.n	80041b4 <HAL_TIM_ConfigClockSource+0x13e>
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d86f      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 8004106:	2b30      	cmp	r3, #48	; 0x30
 8004108:	d064      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x15e>
 800410a:	2b30      	cmp	r3, #48	; 0x30
 800410c:	d86b      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 800410e:	2b20      	cmp	r3, #32
 8004110:	d060      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x15e>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d867      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d05c      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x15e>
 800411a:	2b10      	cmp	r3, #16
 800411c:	d05a      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0x15e>
 800411e:	e062      	b.n	80041e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f000 f974 	bl	800441c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004142:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
      break;
 800414c:	e04f      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f000 f95d 	bl	800441c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004170:	609a      	str	r2, [r3, #8]
      break;
 8004172:	e03c      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	461a      	mov	r2, r3
 8004182:	f000 f8d1 	bl	8004328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2150      	movs	r1, #80	; 0x50
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f92a 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 8004192:	e02c      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f000 f8f0 	bl	8004386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2160      	movs	r1, #96	; 0x60
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f91a 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 80041b2:	e01c      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	461a      	mov	r2, r3
 80041c2:	f000 f8b1 	bl	8004328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f90a 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 80041d2:	e00c      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 f901 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e003      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ea:	e000      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3c      	ldr	r2, [pc, #240]	; (800430c <TIM_Base_SetConfig+0x104>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a39      	ldr	r2, [pc, #228]	; (8004310 <TIM_Base_SetConfig+0x108>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a38      	ldr	r2, [pc, #224]	; (8004314 <TIM_Base_SetConfig+0x10c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a37      	ldr	r2, [pc, #220]	; (8004318 <TIM_Base_SetConfig+0x110>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2d      	ldr	r2, [pc, #180]	; (800430c <TIM_Base_SetConfig+0x104>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004260:	d017      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <TIM_Base_SetConfig+0x108>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a29      	ldr	r2, [pc, #164]	; (8004314 <TIM_Base_SetConfig+0x10c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a28      	ldr	r2, [pc, #160]	; (8004318 <TIM_Base_SetConfig+0x110>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <TIM_Base_SetConfig+0x114>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a26      	ldr	r2, [pc, #152]	; (8004320 <TIM_Base_SetConfig+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a10      	ldr	r2, [pc, #64]	; (800430c <TIM_Base_SetConfig+0x104>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0xe8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <TIM_Base_SetConfig+0x110>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0xe8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <TIM_Base_SetConfig+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0xe8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <TIM_Base_SetConfig+0x118>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xe8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40013400 	.word	0x40013400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800

08004328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 030a 	bic.w	r3, r3, #10
 8004364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0210 	bic.w	r2, r3, #16
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	f043 0307 	orr.w	r3, r3, #7
 8004408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	431a      	orrs	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e063      	b.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d013      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40014000 	.word	0x40014000

0800455c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e040      	b.n	80045f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fd5e 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8b6 	bl	800470c <UART_SetConfig>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e022      	b.n	80045f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa7e 	bl	8004ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb05 	bl	8004bf8 <UART_CheckIdleState>
 80045ee:	4603      	mov	r3, r0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460c:	2b20      	cmp	r3, #32
 800460e:	d178      	bne.n	8004702 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_UART_Transmit+0x24>
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e071      	b.n	8004704 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2221      	movs	r2, #33	; 0x21
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462e:	f7fc fe33 	bl	8001298 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d108      	bne.n	8004660 <HAL_UART_Transmit+0x68>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e003      	b.n	8004668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004668:	e030      	b.n	80046cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	; 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fb67 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e03c      	b.n	8004704 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469c:	b292      	uxth	r2, r2
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	3302      	adds	r3, #2
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e008      	b.n	80046ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b292      	uxth	r2, r2
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	3301      	adds	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1c8      	bne.n	800466a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	2140      	movs	r1, #64	; 0x40
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fb30 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e005      	b.n	8004704 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800473a:	f023 030c 	bic.w	r3, r3, #12
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	430b      	orrs	r3, r1
 8004746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4aa7      	ldr	r2, [pc, #668]	; (8004a24 <UART_SetConfig+0x318>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d120      	bne.n	80047ce <UART_SetConfig+0xc2>
 800478c:	4ba6      	ldr	r3, [pc, #664]	; (8004a28 <UART_SetConfig+0x31c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d817      	bhi.n	80047c8 <UART_SetConfig+0xbc>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x94>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047c3 	.word	0x080047c3
 80047ac:	080047b7 	.word	0x080047b7
 80047b0:	2301      	movs	r3, #1
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0b5      	b.n	8004922 <UART_SetConfig+0x216>
 80047b6:	2302      	movs	r3, #2
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e0b2      	b.n	8004922 <UART_SetConfig+0x216>
 80047bc:	2304      	movs	r3, #4
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0af      	b.n	8004922 <UART_SetConfig+0x216>
 80047c2:	2308      	movs	r3, #8
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e0ac      	b.n	8004922 <UART_SetConfig+0x216>
 80047c8:	2310      	movs	r3, #16
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e0a9      	b.n	8004922 <UART_SetConfig+0x216>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a96      	ldr	r2, [pc, #600]	; (8004a2c <UART_SetConfig+0x320>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d124      	bne.n	8004822 <UART_SetConfig+0x116>
 80047d8:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <UART_SetConfig+0x31c>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047e4:	d011      	beq.n	800480a <UART_SetConfig+0xfe>
 80047e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047ea:	d817      	bhi.n	800481c <UART_SetConfig+0x110>
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f0:	d011      	beq.n	8004816 <UART_SetConfig+0x10a>
 80047f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f6:	d811      	bhi.n	800481c <UART_SetConfig+0x110>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <UART_SetConfig+0xf8>
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d006      	beq.n	8004810 <UART_SetConfig+0x104>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x110>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e08b      	b.n	8004922 <UART_SetConfig+0x216>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e088      	b.n	8004922 <UART_SetConfig+0x216>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e085      	b.n	8004922 <UART_SetConfig+0x216>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e082      	b.n	8004922 <UART_SetConfig+0x216>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e07f      	b.n	8004922 <UART_SetConfig+0x216>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a82      	ldr	r2, [pc, #520]	; (8004a30 <UART_SetConfig+0x324>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d124      	bne.n	8004876 <UART_SetConfig+0x16a>
 800482c:	4b7e      	ldr	r3, [pc, #504]	; (8004a28 <UART_SetConfig+0x31c>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004838:	d011      	beq.n	800485e <UART_SetConfig+0x152>
 800483a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800483e:	d817      	bhi.n	8004870 <UART_SetConfig+0x164>
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004844:	d011      	beq.n	800486a <UART_SetConfig+0x15e>
 8004846:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800484a:	d811      	bhi.n	8004870 <UART_SetConfig+0x164>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <UART_SetConfig+0x14c>
 8004850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004854:	d006      	beq.n	8004864 <UART_SetConfig+0x158>
 8004856:	e00b      	b.n	8004870 <UART_SetConfig+0x164>
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e061      	b.n	8004922 <UART_SetConfig+0x216>
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e05e      	b.n	8004922 <UART_SetConfig+0x216>
 8004864:	2304      	movs	r3, #4
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e05b      	b.n	8004922 <UART_SetConfig+0x216>
 800486a:	2308      	movs	r3, #8
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e058      	b.n	8004922 <UART_SetConfig+0x216>
 8004870:	2310      	movs	r3, #16
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e055      	b.n	8004922 <UART_SetConfig+0x216>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a6e      	ldr	r2, [pc, #440]	; (8004a34 <UART_SetConfig+0x328>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d124      	bne.n	80048ca <UART_SetConfig+0x1be>
 8004880:	4b69      	ldr	r3, [pc, #420]	; (8004a28 <UART_SetConfig+0x31c>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488c:	d011      	beq.n	80048b2 <UART_SetConfig+0x1a6>
 800488e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004892:	d817      	bhi.n	80048c4 <UART_SetConfig+0x1b8>
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004898:	d011      	beq.n	80048be <UART_SetConfig+0x1b2>
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d811      	bhi.n	80048c4 <UART_SetConfig+0x1b8>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <UART_SetConfig+0x1a0>
 80048a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a8:	d006      	beq.n	80048b8 <UART_SetConfig+0x1ac>
 80048aa:	e00b      	b.n	80048c4 <UART_SetConfig+0x1b8>
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e037      	b.n	8004922 <UART_SetConfig+0x216>
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e034      	b.n	8004922 <UART_SetConfig+0x216>
 80048b8:	2304      	movs	r3, #4
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e031      	b.n	8004922 <UART_SetConfig+0x216>
 80048be:	2308      	movs	r3, #8
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e02e      	b.n	8004922 <UART_SetConfig+0x216>
 80048c4:	2310      	movs	r3, #16
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e02b      	b.n	8004922 <UART_SetConfig+0x216>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a5a      	ldr	r2, [pc, #360]	; (8004a38 <UART_SetConfig+0x32c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d124      	bne.n	800491e <UART_SetConfig+0x212>
 80048d4:	4b54      	ldr	r3, [pc, #336]	; (8004a28 <UART_SetConfig+0x31c>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048e0:	d011      	beq.n	8004906 <UART_SetConfig+0x1fa>
 80048e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0x20c>
 80048e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ec:	d011      	beq.n	8004912 <UART_SetConfig+0x206>
 80048ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f2:	d811      	bhi.n	8004918 <UART_SetConfig+0x20c>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x1f4>
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d006      	beq.n	800490c <UART_SetConfig+0x200>
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x20c>
 8004900:	2300      	movs	r3, #0
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x216>
 8004906:	2302      	movs	r3, #2
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e00a      	b.n	8004922 <UART_SetConfig+0x216>
 800490c:	2304      	movs	r3, #4
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e007      	b.n	8004922 <UART_SetConfig+0x216>
 8004912:	2308      	movs	r3, #8
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e004      	b.n	8004922 <UART_SetConfig+0x216>
 8004918:	2310      	movs	r3, #16
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e001      	b.n	8004922 <UART_SetConfig+0x216>
 800491e:	2310      	movs	r3, #16
 8004920:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492a:	d15b      	bne.n	80049e4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	2b08      	cmp	r3, #8
 8004930:	d827      	bhi.n	8004982 <UART_SetConfig+0x276>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x22c>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe fbee 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e013      	b.n	800498c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe fc0c 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <UART_SetConfig+0x330>)
 800496e:	61bb      	str	r3, [r7, #24]
        break;
 8004970:	e00c      	b.n	800498c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7fe fb6d 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004976:	61b8      	str	r0, [r7, #24]
        break;
 8004978:	e008      	b.n	800498c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e004      	b.n	800498c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	77bb      	strb	r3, [r7, #30]
        break;
 800498a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8082 	beq.w	8004a98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	005a      	lsls	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	d916      	bls.n	80049de <UART_SetConfig+0x2d2>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d212      	bcs.n	80049de <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f023 030f 	bic.w	r3, r3, #15
 80049c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	89fa      	ldrh	r2, [r7, #14]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	e05c      	b.n	8004a98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	77bb      	strb	r3, [r7, #30]
 80049e2:	e059      	b.n	8004a98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e4:	7ffb      	ldrb	r3, [r7, #31]
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d835      	bhi.n	8004a56 <UART_SetConfig+0x34a>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x2e4>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a57 	.word	0x08004a57
 8004a00:	08004a47 	.word	0x08004a47
 8004a04:	08004a57 	.word	0x08004a57
 8004a08:	08004a57 	.word	0x08004a57
 8004a0c:	08004a57 	.word	0x08004a57
 8004a10:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe fb92 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004a18:	61b8      	str	r0, [r7, #24]
        break;
 8004a1a:	e021      	b.n	8004a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fe fbb0 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004a20:	61b8      	str	r0, [r7, #24]
        break;
 8004a22:	e01d      	b.n	8004a60 <UART_SetConfig+0x354>
 8004a24:	40013800 	.word	0x40013800
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40004400 	.word	0x40004400
 8004a30:	40004800 	.word	0x40004800
 8004a34:	40004c00 	.word	0x40004c00
 8004a38:	40005000 	.word	0x40005000
 8004a3c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <UART_SetConfig+0x3a4>)
 8004a42:	61bb      	str	r3, [r7, #24]
        break;
 8004a44:	e00c      	b.n	8004a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe fb03 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004a4a:	61b8      	str	r0, [r7, #24]
        break;
 8004a4c:	e008      	b.n	8004a60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a52:	61bb      	str	r3, [r7, #24]
        break;
 8004a54:	e004      	b.n	8004a60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d018      	beq.n	8004a98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085a      	lsrs	r2, r3, #1
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	441a      	add	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d909      	bls.n	8004a94 <UART_SetConfig+0x388>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d205      	bcs.n	8004a94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	e001      	b.n	8004a98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004aa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01a      	beq.n	8004bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb2:	d10a      	bne.n	8004bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b098      	sub	sp, #96	; 0x60
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c08:	f7fc fb46 	bl	8001298 <HAL_GetTick>
 8004c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d12e      	bne.n	8004c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c24:	2200      	movs	r2, #0
 8004c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f88c 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d021      	beq.n	8004c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
 8004c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e6      	bne.n	8004c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e062      	b.n	8004d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d149      	bne.n	8004d1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f856 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d03c      	beq.n	8004d1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	623b      	str	r3, [r7, #32]
   return(result);
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf4:	61fa      	str	r2, [r7, #28]
 8004cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	617b      	str	r3, [r7, #20]
   return(result);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e011      	b.n	8004d40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3758      	adds	r7, #88	; 0x58
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d58:	e049      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d045      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fc fa99 	bl	8001298 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e048      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d031      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d110      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f838 	bl	8004e16 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2208      	movs	r2, #8
 8004daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e029      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc8:	d111      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f81e 	bl	8004e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e00f      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d0a6      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b095      	sub	sp, #84	; 0x54
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d118      	bne.n	8004ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0310 	bic.w	r3, r3, #16
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ed2:	bf00      	nop
 8004ed4:	3754      	adds	r7, #84	; 0x54
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ee6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004eea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f14:	b084      	sub	sp, #16
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	f107 0014 	add.w	r0, r7, #20
 8004f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	b004      	add	sp, #16
 8004f54:	4770      	bx	lr
	...

08004f58 <__errno>:
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <__errno+0x8>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	; (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	; (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	; (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	; (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f001 f8be 	bl	80060f8 <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	080062a8 	.word	0x080062a8
 8004fa0:	080062a8 	.word	0x080062a8
 8004fa4:	080062a8 	.word	0x080062a8
 8004fa8:	080062ac 	.word	0x080062ac

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <_puts_r>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	b118      	cbz	r0, 8004fcc <_puts_r+0x10>
 8004fc4:	6983      	ldr	r3, [r0, #24]
 8004fc6:	b90b      	cbnz	r3, 8004fcc <_puts_r+0x10>
 8004fc8:	f000 fa94 	bl	80054f4 <__sinit>
 8004fcc:	69ab      	ldr	r3, [r5, #24]
 8004fce:	68ac      	ldr	r4, [r5, #8]
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_puts_r+0x1c>
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 fa8e 	bl	80054f4 <__sinit>
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	; (800508c <_puts_r+0xd0>)
 8004fda:	429c      	cmp	r4, r3
 8004fdc:	d120      	bne.n	8005020 <_puts_r+0x64>
 8004fde:	686c      	ldr	r4, [r5, #4]
 8004fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe2:	07db      	lsls	r3, r3, #31
 8004fe4:	d405      	bmi.n	8004ff2 <_puts_r+0x36>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	0598      	lsls	r0, r3, #22
 8004fea:	d402      	bmi.n	8004ff2 <_puts_r+0x36>
 8004fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fee:	f000 fb31 	bl	8005654 <__retarget_lock_acquire_recursive>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	0719      	lsls	r1, r3, #28
 8004ff6:	d51d      	bpl.n	8005034 <_puts_r+0x78>
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	b1db      	cbz	r3, 8005034 <_puts_r+0x78>
 8004ffc:	3e01      	subs	r6, #1
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005004:	3b01      	subs	r3, #1
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	bb39      	cbnz	r1, 800505a <_puts_r+0x9e>
 800500a:	2b00      	cmp	r3, #0
 800500c:	da38      	bge.n	8005080 <_puts_r+0xc4>
 800500e:	4622      	mov	r2, r4
 8005010:	210a      	movs	r1, #10
 8005012:	4628      	mov	r0, r5
 8005014:	f000 f876 	bl	8005104 <__swbuf_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d011      	beq.n	8005040 <_puts_r+0x84>
 800501c:	250a      	movs	r5, #10
 800501e:	e011      	b.n	8005044 <_puts_r+0x88>
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <_puts_r+0xd4>)
 8005022:	429c      	cmp	r4, r3
 8005024:	d101      	bne.n	800502a <_puts_r+0x6e>
 8005026:	68ac      	ldr	r4, [r5, #8]
 8005028:	e7da      	b.n	8004fe0 <_puts_r+0x24>
 800502a:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <_puts_r+0xd8>)
 800502c:	429c      	cmp	r4, r3
 800502e:	bf08      	it	eq
 8005030:	68ec      	ldreq	r4, [r5, #12]
 8005032:	e7d5      	b.n	8004fe0 <_puts_r+0x24>
 8005034:	4621      	mov	r1, r4
 8005036:	4628      	mov	r0, r5
 8005038:	f000 f8b6 	bl	80051a8 <__swsetup_r>
 800503c:	2800      	cmp	r0, #0
 800503e:	d0dd      	beq.n	8004ffc <_puts_r+0x40>
 8005040:	f04f 35ff 	mov.w	r5, #4294967295
 8005044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005046:	07da      	lsls	r2, r3, #31
 8005048:	d405      	bmi.n	8005056 <_puts_r+0x9a>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	d402      	bmi.n	8005056 <_puts_r+0x9a>
 8005050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005052:	f000 fb00 	bl	8005656 <__retarget_lock_release_recursive>
 8005056:	4628      	mov	r0, r5
 8005058:	bd70      	pop	{r4, r5, r6, pc}
 800505a:	2b00      	cmp	r3, #0
 800505c:	da04      	bge.n	8005068 <_puts_r+0xac>
 800505e:	69a2      	ldr	r2, [r4, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	dc06      	bgt.n	8005072 <_puts_r+0xb6>
 8005064:	290a      	cmp	r1, #10
 8005066:	d004      	beq.n	8005072 <_puts_r+0xb6>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	6022      	str	r2, [r4, #0]
 800506e:	7019      	strb	r1, [r3, #0]
 8005070:	e7c5      	b.n	8004ffe <_puts_r+0x42>
 8005072:	4622      	mov	r2, r4
 8005074:	4628      	mov	r0, r5
 8005076:	f000 f845 	bl	8005104 <__swbuf_r>
 800507a:	3001      	adds	r0, #1
 800507c:	d1bf      	bne.n	8004ffe <_puts_r+0x42>
 800507e:	e7df      	b.n	8005040 <_puts_r+0x84>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	250a      	movs	r5, #10
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	6022      	str	r2, [r4, #0]
 8005088:	701d      	strb	r5, [r3, #0]
 800508a:	e7db      	b.n	8005044 <_puts_r+0x88>
 800508c:	08006234 	.word	0x08006234
 8005090:	08006254 	.word	0x08006254
 8005094:	08006214 	.word	0x08006214

08005098 <puts>:
 8005098:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <puts+0xc>)
 800509a:	4601      	mov	r1, r0
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f7ff bf8d 	b.w	8004fbc <_puts_r>
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <srand>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <srand+0x44>)
 80050ac:	681d      	ldr	r5, [r3, #0]
 80050ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050b0:	4604      	mov	r4, r0
 80050b2:	b9b3      	cbnz	r3, 80050e2 <srand+0x3a>
 80050b4:	2018      	movs	r0, #24
 80050b6:	f000 fb35 	bl	8005724 <malloc>
 80050ba:	4602      	mov	r2, r0
 80050bc:	63a8      	str	r0, [r5, #56]	; 0x38
 80050be:	b920      	cbnz	r0, 80050ca <srand+0x22>
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <srand+0x48>)
 80050c2:	480c      	ldr	r0, [pc, #48]	; (80050f4 <srand+0x4c>)
 80050c4:	2142      	movs	r1, #66	; 0x42
 80050c6:	f000 f8dd 	bl	8005284 <__assert_func>
 80050ca:	490b      	ldr	r1, [pc, #44]	; (80050f8 <srand+0x50>)
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <srand+0x54>)
 80050ce:	e9c0 1300 	strd	r1, r3, [r0]
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <srand+0x58>)
 80050d4:	6083      	str	r3, [r0, #8]
 80050d6:	230b      	movs	r3, #11
 80050d8:	8183      	strh	r3, [r0, #12]
 80050da:	2100      	movs	r1, #0
 80050dc:	2001      	movs	r0, #1
 80050de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050e4:	2200      	movs	r2, #0
 80050e6:	611c      	str	r4, [r3, #16]
 80050e8:	615a      	str	r2, [r3, #20]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	08006164 	.word	0x08006164
 80050f4:	0800617b 	.word	0x0800617b
 80050f8:	abcd330e 	.word	0xabcd330e
 80050fc:	e66d1234 	.word	0xe66d1234
 8005100:	0005deec 	.word	0x0005deec

08005104 <__swbuf_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	460e      	mov	r6, r1
 8005108:	4614      	mov	r4, r2
 800510a:	4605      	mov	r5, r0
 800510c:	b118      	cbz	r0, 8005116 <__swbuf_r+0x12>
 800510e:	6983      	ldr	r3, [r0, #24]
 8005110:	b90b      	cbnz	r3, 8005116 <__swbuf_r+0x12>
 8005112:	f000 f9ef 	bl	80054f4 <__sinit>
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <__swbuf_r+0x98>)
 8005118:	429c      	cmp	r4, r3
 800511a:	d12b      	bne.n	8005174 <__swbuf_r+0x70>
 800511c:	686c      	ldr	r4, [r5, #4]
 800511e:	69a3      	ldr	r3, [r4, #24]
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	071a      	lsls	r2, r3, #28
 8005126:	d52f      	bpl.n	8005188 <__swbuf_r+0x84>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	b36b      	cbz	r3, 8005188 <__swbuf_r+0x84>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	1ac0      	subs	r0, r0, r3
 8005132:	6963      	ldr	r3, [r4, #20]
 8005134:	b2f6      	uxtb	r6, r6
 8005136:	4283      	cmp	r3, r0
 8005138:	4637      	mov	r7, r6
 800513a:	dc04      	bgt.n	8005146 <__swbuf_r+0x42>
 800513c:	4621      	mov	r1, r4
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f944 	bl	80053cc <_fflush_r>
 8005144:	bb30      	cbnz	r0, 8005194 <__swbuf_r+0x90>
 8005146:	68a3      	ldr	r3, [r4, #8]
 8005148:	3b01      	subs	r3, #1
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	701e      	strb	r6, [r3, #0]
 8005154:	6963      	ldr	r3, [r4, #20]
 8005156:	3001      	adds	r0, #1
 8005158:	4283      	cmp	r3, r0
 800515a:	d004      	beq.n	8005166 <__swbuf_r+0x62>
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d506      	bpl.n	8005170 <__swbuf_r+0x6c>
 8005162:	2e0a      	cmp	r6, #10
 8005164:	d104      	bne.n	8005170 <__swbuf_r+0x6c>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f92f 	bl	80053cc <_fflush_r>
 800516e:	b988      	cbnz	r0, 8005194 <__swbuf_r+0x90>
 8005170:	4638      	mov	r0, r7
 8005172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <__swbuf_r+0x9c>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d101      	bne.n	800517e <__swbuf_r+0x7a>
 800517a:	68ac      	ldr	r4, [r5, #8]
 800517c:	e7cf      	b.n	800511e <__swbuf_r+0x1a>
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <__swbuf_r+0xa0>)
 8005180:	429c      	cmp	r4, r3
 8005182:	bf08      	it	eq
 8005184:	68ec      	ldreq	r4, [r5, #12]
 8005186:	e7ca      	b.n	800511e <__swbuf_r+0x1a>
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f80c 	bl	80051a8 <__swsetup_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	d0cb      	beq.n	800512c <__swbuf_r+0x28>
 8005194:	f04f 37ff 	mov.w	r7, #4294967295
 8005198:	e7ea      	b.n	8005170 <__swbuf_r+0x6c>
 800519a:	bf00      	nop
 800519c:	08006234 	.word	0x08006234
 80051a0:	08006254 	.word	0x08006254
 80051a4:	08006214 	.word	0x08006214

080051a8 <__swsetup_r>:
 80051a8:	4b32      	ldr	r3, [pc, #200]	; (8005274 <__swsetup_r+0xcc>)
 80051aa:	b570      	push	{r4, r5, r6, lr}
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	4606      	mov	r6, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	b125      	cbz	r5, 80051be <__swsetup_r+0x16>
 80051b4:	69ab      	ldr	r3, [r5, #24]
 80051b6:	b913      	cbnz	r3, 80051be <__swsetup_r+0x16>
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f99b 	bl	80054f4 <__sinit>
 80051be:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <__swsetup_r+0xd0>)
 80051c0:	429c      	cmp	r4, r3
 80051c2:	d10f      	bne.n	80051e4 <__swsetup_r+0x3c>
 80051c4:	686c      	ldr	r4, [r5, #4]
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051cc:	0719      	lsls	r1, r3, #28
 80051ce:	d42c      	bmi.n	800522a <__swsetup_r+0x82>
 80051d0:	06dd      	lsls	r5, r3, #27
 80051d2:	d411      	bmi.n	80051f8 <__swsetup_r+0x50>
 80051d4:	2309      	movs	r3, #9
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	f04f 30ff 	mov.w	r0, #4294967295
 80051e2:	e03e      	b.n	8005262 <__swsetup_r+0xba>
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <__swsetup_r+0xd4>)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d101      	bne.n	80051ee <__swsetup_r+0x46>
 80051ea:	68ac      	ldr	r4, [r5, #8]
 80051ec:	e7eb      	b.n	80051c6 <__swsetup_r+0x1e>
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <__swsetup_r+0xd8>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	bf08      	it	eq
 80051f4:	68ec      	ldreq	r4, [r5, #12]
 80051f6:	e7e6      	b.n	80051c6 <__swsetup_r+0x1e>
 80051f8:	0758      	lsls	r0, r3, #29
 80051fa:	d512      	bpl.n	8005222 <__swsetup_r+0x7a>
 80051fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051fe:	b141      	cbz	r1, 8005212 <__swsetup_r+0x6a>
 8005200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005204:	4299      	cmp	r1, r3
 8005206:	d002      	beq.n	800520e <__swsetup_r+0x66>
 8005208:	4630      	mov	r0, r6
 800520a:	f000 fa93 	bl	8005734 <_free_r>
 800520e:	2300      	movs	r3, #0
 8005210:	6363      	str	r3, [r4, #52]	; 0x34
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	2300      	movs	r3, #0
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f043 0308 	orr.w	r3, r3, #8
 8005228:	81a3      	strh	r3, [r4, #12]
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	b94b      	cbnz	r3, 8005242 <__swsetup_r+0x9a>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d003      	beq.n	8005242 <__swsetup_r+0x9a>
 800523a:	4621      	mov	r1, r4
 800523c:	4630      	mov	r0, r6
 800523e:	f000 fa31 	bl	80056a4 <__smakebuf_r>
 8005242:	89a0      	ldrh	r0, [r4, #12]
 8005244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005248:	f010 0301 	ands.w	r3, r0, #1
 800524c:	d00a      	beq.n	8005264 <__swsetup_r+0xbc>
 800524e:	2300      	movs	r3, #0
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	6963      	ldr	r3, [r4, #20]
 8005254:	425b      	negs	r3, r3
 8005256:	61a3      	str	r3, [r4, #24]
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	b943      	cbnz	r3, 800526e <__swsetup_r+0xc6>
 800525c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005260:	d1ba      	bne.n	80051d8 <__swsetup_r+0x30>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	0781      	lsls	r1, r0, #30
 8005266:	bf58      	it	pl
 8005268:	6963      	ldrpl	r3, [r4, #20]
 800526a:	60a3      	str	r3, [r4, #8]
 800526c:	e7f4      	b.n	8005258 <__swsetup_r+0xb0>
 800526e:	2000      	movs	r0, #0
 8005270:	e7f7      	b.n	8005262 <__swsetup_r+0xba>
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c
 8005278:	08006234 	.word	0x08006234
 800527c:	08006254 	.word	0x08006254
 8005280:	08006214 	.word	0x08006214

08005284 <__assert_func>:
 8005284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005286:	4614      	mov	r4, r2
 8005288:	461a      	mov	r2, r3
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <__assert_func+0x2c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4605      	mov	r5, r0
 8005290:	68d8      	ldr	r0, [r3, #12]
 8005292:	b14c      	cbz	r4, 80052a8 <__assert_func+0x24>
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <__assert_func+0x30>)
 8005296:	9100      	str	r1, [sp, #0]
 8005298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800529c:	4906      	ldr	r1, [pc, #24]	; (80052b8 <__assert_func+0x34>)
 800529e:	462b      	mov	r3, r5
 80052a0:	f000 f9a6 	bl	80055f0 <fiprintf>
 80052a4:	f000 fe7a 	bl	8005f9c <abort>
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__assert_func+0x38>)
 80052aa:	461c      	mov	r4, r3
 80052ac:	e7f3      	b.n	8005296 <__assert_func+0x12>
 80052ae:	bf00      	nop
 80052b0:	2000000c 	.word	0x2000000c
 80052b4:	080061d6 	.word	0x080061d6
 80052b8:	080061e3 	.word	0x080061e3
 80052bc:	08006211 	.word	0x08006211

080052c0 <__sflush_r>:
 80052c0:	898a      	ldrh	r2, [r1, #12]
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	4605      	mov	r5, r0
 80052c8:	0710      	lsls	r0, r2, #28
 80052ca:	460c      	mov	r4, r1
 80052cc:	d458      	bmi.n	8005380 <__sflush_r+0xc0>
 80052ce:	684b      	ldr	r3, [r1, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dc05      	bgt.n	80052e0 <__sflush_r+0x20>
 80052d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dc02      	bgt.n	80052e0 <__sflush_r+0x20>
 80052da:	2000      	movs	r0, #0
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	d0f9      	beq.n	80052da <__sflush_r+0x1a>
 80052e6:	2300      	movs	r3, #0
 80052e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052ec:	682f      	ldr	r7, [r5, #0]
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	d032      	beq.n	8005358 <__sflush_r+0x98>
 80052f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	075a      	lsls	r2, r3, #29
 80052f8:	d505      	bpl.n	8005306 <__sflush_r+0x46>
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	1ac0      	subs	r0, r0, r3
 80052fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005300:	b10b      	cbz	r3, 8005306 <__sflush_r+0x46>
 8005302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005304:	1ac0      	subs	r0, r0, r3
 8005306:	2300      	movs	r3, #0
 8005308:	4602      	mov	r2, r0
 800530a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800530c:	6a21      	ldr	r1, [r4, #32]
 800530e:	4628      	mov	r0, r5
 8005310:	47b0      	blx	r6
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	d106      	bne.n	8005326 <__sflush_r+0x66>
 8005318:	6829      	ldr	r1, [r5, #0]
 800531a:	291d      	cmp	r1, #29
 800531c:	d82c      	bhi.n	8005378 <__sflush_r+0xb8>
 800531e:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <__sflush_r+0x108>)
 8005320:	40ca      	lsrs	r2, r1
 8005322:	07d6      	lsls	r6, r2, #31
 8005324:	d528      	bpl.n	8005378 <__sflush_r+0xb8>
 8005326:	2200      	movs	r2, #0
 8005328:	6062      	str	r2, [r4, #4]
 800532a:	04d9      	lsls	r1, r3, #19
 800532c:	6922      	ldr	r2, [r4, #16]
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	d504      	bpl.n	800533c <__sflush_r+0x7c>
 8005332:	1c42      	adds	r2, r0, #1
 8005334:	d101      	bne.n	800533a <__sflush_r+0x7a>
 8005336:	682b      	ldr	r3, [r5, #0]
 8005338:	b903      	cbnz	r3, 800533c <__sflush_r+0x7c>
 800533a:	6560      	str	r0, [r4, #84]	; 0x54
 800533c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800533e:	602f      	str	r7, [r5, #0]
 8005340:	2900      	cmp	r1, #0
 8005342:	d0ca      	beq.n	80052da <__sflush_r+0x1a>
 8005344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005348:	4299      	cmp	r1, r3
 800534a:	d002      	beq.n	8005352 <__sflush_r+0x92>
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f9f1 	bl	8005734 <_free_r>
 8005352:	2000      	movs	r0, #0
 8005354:	6360      	str	r0, [r4, #52]	; 0x34
 8005356:	e7c1      	b.n	80052dc <__sflush_r+0x1c>
 8005358:	6a21      	ldr	r1, [r4, #32]
 800535a:	2301      	movs	r3, #1
 800535c:	4628      	mov	r0, r5
 800535e:	47b0      	blx	r6
 8005360:	1c41      	adds	r1, r0, #1
 8005362:	d1c7      	bne.n	80052f4 <__sflush_r+0x34>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0c4      	beq.n	80052f4 <__sflush_r+0x34>
 800536a:	2b1d      	cmp	r3, #29
 800536c:	d001      	beq.n	8005372 <__sflush_r+0xb2>
 800536e:	2b16      	cmp	r3, #22
 8005370:	d101      	bne.n	8005376 <__sflush_r+0xb6>
 8005372:	602f      	str	r7, [r5, #0]
 8005374:	e7b1      	b.n	80052da <__sflush_r+0x1a>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	e7ad      	b.n	80052dc <__sflush_r+0x1c>
 8005380:	690f      	ldr	r7, [r1, #16]
 8005382:	2f00      	cmp	r7, #0
 8005384:	d0a9      	beq.n	80052da <__sflush_r+0x1a>
 8005386:	0793      	lsls	r3, r2, #30
 8005388:	680e      	ldr	r6, [r1, #0]
 800538a:	bf08      	it	eq
 800538c:	694b      	ldreq	r3, [r1, #20]
 800538e:	600f      	str	r7, [r1, #0]
 8005390:	bf18      	it	ne
 8005392:	2300      	movne	r3, #0
 8005394:	eba6 0807 	sub.w	r8, r6, r7
 8005398:	608b      	str	r3, [r1, #8]
 800539a:	f1b8 0f00 	cmp.w	r8, #0
 800539e:	dd9c      	ble.n	80052da <__sflush_r+0x1a>
 80053a0:	6a21      	ldr	r1, [r4, #32]
 80053a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053a4:	4643      	mov	r3, r8
 80053a6:	463a      	mov	r2, r7
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b0      	blx	r6
 80053ac:	2800      	cmp	r0, #0
 80053ae:	dc06      	bgt.n	80053be <__sflush_r+0xfe>
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	e78e      	b.n	80052dc <__sflush_r+0x1c>
 80053be:	4407      	add	r7, r0
 80053c0:	eba8 0800 	sub.w	r8, r8, r0
 80053c4:	e7e9      	b.n	800539a <__sflush_r+0xda>
 80053c6:	bf00      	nop
 80053c8:	20400001 	.word	0x20400001

080053cc <_fflush_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	690b      	ldr	r3, [r1, #16]
 80053d0:	4605      	mov	r5, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	b913      	cbnz	r3, 80053dc <_fflush_r+0x10>
 80053d6:	2500      	movs	r5, #0
 80053d8:	4628      	mov	r0, r5
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	b118      	cbz	r0, 80053e6 <_fflush_r+0x1a>
 80053de:	6983      	ldr	r3, [r0, #24]
 80053e0:	b90b      	cbnz	r3, 80053e6 <_fflush_r+0x1a>
 80053e2:	f000 f887 	bl	80054f4 <__sinit>
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <_fflush_r+0x6c>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d11b      	bne.n	8005424 <_fflush_r+0x58>
 80053ec:	686c      	ldr	r4, [r5, #4]
 80053ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <_fflush_r+0xa>
 80053f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053f8:	07d0      	lsls	r0, r2, #31
 80053fa:	d404      	bmi.n	8005406 <_fflush_r+0x3a>
 80053fc:	0599      	lsls	r1, r3, #22
 80053fe:	d402      	bmi.n	8005406 <_fflush_r+0x3a>
 8005400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005402:	f000 f927 	bl	8005654 <__retarget_lock_acquire_recursive>
 8005406:	4628      	mov	r0, r5
 8005408:	4621      	mov	r1, r4
 800540a:	f7ff ff59 	bl	80052c0 <__sflush_r>
 800540e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005410:	07da      	lsls	r2, r3, #31
 8005412:	4605      	mov	r5, r0
 8005414:	d4e0      	bmi.n	80053d8 <_fflush_r+0xc>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	059b      	lsls	r3, r3, #22
 800541a:	d4dd      	bmi.n	80053d8 <_fflush_r+0xc>
 800541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541e:	f000 f91a 	bl	8005656 <__retarget_lock_release_recursive>
 8005422:	e7d9      	b.n	80053d8 <_fflush_r+0xc>
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <_fflush_r+0x70>)
 8005426:	429c      	cmp	r4, r3
 8005428:	d101      	bne.n	800542e <_fflush_r+0x62>
 800542a:	68ac      	ldr	r4, [r5, #8]
 800542c:	e7df      	b.n	80053ee <_fflush_r+0x22>
 800542e:	4b04      	ldr	r3, [pc, #16]	; (8005440 <_fflush_r+0x74>)
 8005430:	429c      	cmp	r4, r3
 8005432:	bf08      	it	eq
 8005434:	68ec      	ldreq	r4, [r5, #12]
 8005436:	e7da      	b.n	80053ee <_fflush_r+0x22>
 8005438:	08006234 	.word	0x08006234
 800543c:	08006254 	.word	0x08006254
 8005440:	08006214 	.word	0x08006214

08005444 <std>:
 8005444:	2300      	movs	r3, #0
 8005446:	b510      	push	{r4, lr}
 8005448:	4604      	mov	r4, r0
 800544a:	e9c0 3300 	strd	r3, r3, [r0]
 800544e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005452:	6083      	str	r3, [r0, #8]
 8005454:	8181      	strh	r1, [r0, #12]
 8005456:	6643      	str	r3, [r0, #100]	; 0x64
 8005458:	81c2      	strh	r2, [r0, #14]
 800545a:	6183      	str	r3, [r0, #24]
 800545c:	4619      	mov	r1, r3
 800545e:	2208      	movs	r2, #8
 8005460:	305c      	adds	r0, #92	; 0x5c
 8005462:	f7ff fda3 	bl	8004fac <memset>
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <std+0x38>)
 8005468:	6263      	str	r3, [r4, #36]	; 0x24
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <std+0x3c>)
 800546c:	62a3      	str	r3, [r4, #40]	; 0x28
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <std+0x40>)
 8005470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <std+0x44>)
 8005474:	6224      	str	r4, [r4, #32]
 8005476:	6323      	str	r3, [r4, #48]	; 0x30
 8005478:	bd10      	pop	{r4, pc}
 800547a:	bf00      	nop
 800547c:	08005ef1 	.word	0x08005ef1
 8005480:	08005f13 	.word	0x08005f13
 8005484:	08005f4b 	.word	0x08005f4b
 8005488:	08005f6f 	.word	0x08005f6f

0800548c <_cleanup_r>:
 800548c:	4901      	ldr	r1, [pc, #4]	; (8005494 <_cleanup_r+0x8>)
 800548e:	f000 b8c1 	b.w	8005614 <_fwalk_reent>
 8005492:	bf00      	nop
 8005494:	080053cd 	.word	0x080053cd

08005498 <__sfmoreglue>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	2268      	movs	r2, #104	; 0x68
 800549c:	1e4d      	subs	r5, r1, #1
 800549e:	4355      	muls	r5, r2
 80054a0:	460e      	mov	r6, r1
 80054a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054a6:	f000 f9b1 	bl	800580c <_malloc_r>
 80054aa:	4604      	mov	r4, r0
 80054ac:	b140      	cbz	r0, 80054c0 <__sfmoreglue+0x28>
 80054ae:	2100      	movs	r1, #0
 80054b0:	e9c0 1600 	strd	r1, r6, [r0]
 80054b4:	300c      	adds	r0, #12
 80054b6:	60a0      	str	r0, [r4, #8]
 80054b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054bc:	f7ff fd76 	bl	8004fac <memset>
 80054c0:	4620      	mov	r0, r4
 80054c2:	bd70      	pop	{r4, r5, r6, pc}

080054c4 <__sfp_lock_acquire>:
 80054c4:	4801      	ldr	r0, [pc, #4]	; (80054cc <__sfp_lock_acquire+0x8>)
 80054c6:	f000 b8c5 	b.w	8005654 <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	2000056d 	.word	0x2000056d

080054d0 <__sfp_lock_release>:
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <__sfp_lock_release+0x8>)
 80054d2:	f000 b8c0 	b.w	8005656 <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	2000056d 	.word	0x2000056d

080054dc <__sinit_lock_acquire>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__sinit_lock_acquire+0x8>)
 80054de:	f000 b8b9 	b.w	8005654 <__retarget_lock_acquire_recursive>
 80054e2:	bf00      	nop
 80054e4:	2000056e 	.word	0x2000056e

080054e8 <__sinit_lock_release>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__sinit_lock_release+0x8>)
 80054ea:	f000 b8b4 	b.w	8005656 <__retarget_lock_release_recursive>
 80054ee:	bf00      	nop
 80054f0:	2000056e 	.word	0x2000056e

080054f4 <__sinit>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	f7ff fff0 	bl	80054dc <__sinit_lock_acquire>
 80054fc:	69a3      	ldr	r3, [r4, #24]
 80054fe:	b11b      	cbz	r3, 8005508 <__sinit+0x14>
 8005500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005504:	f7ff bff0 	b.w	80054e8 <__sinit_lock_release>
 8005508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800550c:	6523      	str	r3, [r4, #80]	; 0x50
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <__sinit+0x68>)
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <__sinit+0x6c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	62a2      	str	r2, [r4, #40]	; 0x28
 8005516:	42a3      	cmp	r3, r4
 8005518:	bf04      	itt	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	61a3      	streq	r3, [r4, #24]
 800551e:	4620      	mov	r0, r4
 8005520:	f000 f820 	bl	8005564 <__sfp>
 8005524:	6060      	str	r0, [r4, #4]
 8005526:	4620      	mov	r0, r4
 8005528:	f000 f81c 	bl	8005564 <__sfp>
 800552c:	60a0      	str	r0, [r4, #8]
 800552e:	4620      	mov	r0, r4
 8005530:	f000 f818 	bl	8005564 <__sfp>
 8005534:	2200      	movs	r2, #0
 8005536:	60e0      	str	r0, [r4, #12]
 8005538:	2104      	movs	r1, #4
 800553a:	6860      	ldr	r0, [r4, #4]
 800553c:	f7ff ff82 	bl	8005444 <std>
 8005540:	68a0      	ldr	r0, [r4, #8]
 8005542:	2201      	movs	r2, #1
 8005544:	2109      	movs	r1, #9
 8005546:	f7ff ff7d 	bl	8005444 <std>
 800554a:	68e0      	ldr	r0, [r4, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	2112      	movs	r1, #18
 8005550:	f7ff ff78 	bl	8005444 <std>
 8005554:	2301      	movs	r3, #1
 8005556:	61a3      	str	r3, [r4, #24]
 8005558:	e7d2      	b.n	8005500 <__sinit+0xc>
 800555a:	bf00      	nop
 800555c:	08006160 	.word	0x08006160
 8005560:	0800548d 	.word	0x0800548d

08005564 <__sfp>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	4607      	mov	r7, r0
 8005568:	f7ff ffac 	bl	80054c4 <__sfp_lock_acquire>
 800556c:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <__sfp+0x84>)
 800556e:	681e      	ldr	r6, [r3, #0]
 8005570:	69b3      	ldr	r3, [r6, #24]
 8005572:	b913      	cbnz	r3, 800557a <__sfp+0x16>
 8005574:	4630      	mov	r0, r6
 8005576:	f7ff ffbd 	bl	80054f4 <__sinit>
 800557a:	3648      	adds	r6, #72	; 0x48
 800557c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005580:	3b01      	subs	r3, #1
 8005582:	d503      	bpl.n	800558c <__sfp+0x28>
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	b30b      	cbz	r3, 80055cc <__sfp+0x68>
 8005588:	6836      	ldr	r6, [r6, #0]
 800558a:	e7f7      	b.n	800557c <__sfp+0x18>
 800558c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005590:	b9d5      	cbnz	r5, 80055c8 <__sfp+0x64>
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <__sfp+0x88>)
 8005594:	60e3      	str	r3, [r4, #12]
 8005596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800559a:	6665      	str	r5, [r4, #100]	; 0x64
 800559c:	f000 f859 	bl	8005652 <__retarget_lock_init_recursive>
 80055a0:	f7ff ff96 	bl	80054d0 <__sfp_lock_release>
 80055a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055ac:	6025      	str	r5, [r4, #0]
 80055ae:	61a5      	str	r5, [r4, #24]
 80055b0:	2208      	movs	r2, #8
 80055b2:	4629      	mov	r1, r5
 80055b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055b8:	f7ff fcf8 	bl	8004fac <memset>
 80055bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055c4:	4620      	mov	r0, r4
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	3468      	adds	r4, #104	; 0x68
 80055ca:	e7d9      	b.n	8005580 <__sfp+0x1c>
 80055cc:	2104      	movs	r1, #4
 80055ce:	4638      	mov	r0, r7
 80055d0:	f7ff ff62 	bl	8005498 <__sfmoreglue>
 80055d4:	4604      	mov	r4, r0
 80055d6:	6030      	str	r0, [r6, #0]
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1d5      	bne.n	8005588 <__sfp+0x24>
 80055dc:	f7ff ff78 	bl	80054d0 <__sfp_lock_release>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	e7ee      	b.n	80055c4 <__sfp+0x60>
 80055e6:	bf00      	nop
 80055e8:	08006160 	.word	0x08006160
 80055ec:	ffff0001 	.word	0xffff0001

080055f0 <fiprintf>:
 80055f0:	b40e      	push	{r1, r2, r3}
 80055f2:	b503      	push	{r0, r1, lr}
 80055f4:	4601      	mov	r1, r0
 80055f6:	ab03      	add	r3, sp, #12
 80055f8:	4805      	ldr	r0, [pc, #20]	; (8005610 <fiprintf+0x20>)
 80055fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	f000 f9a1 	bl	8005948 <_vfiprintf_r>
 8005606:	b002      	add	sp, #8
 8005608:	f85d eb04 	ldr.w	lr, [sp], #4
 800560c:	b003      	add	sp, #12
 800560e:	4770      	bx	lr
 8005610:	2000000c 	.word	0x2000000c

08005614 <_fwalk_reent>:
 8005614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005618:	4606      	mov	r6, r0
 800561a:	4688      	mov	r8, r1
 800561c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005620:	2700      	movs	r7, #0
 8005622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005626:	f1b9 0901 	subs.w	r9, r9, #1
 800562a:	d505      	bpl.n	8005638 <_fwalk_reent+0x24>
 800562c:	6824      	ldr	r4, [r4, #0]
 800562e:	2c00      	cmp	r4, #0
 8005630:	d1f7      	bne.n	8005622 <_fwalk_reent+0xe>
 8005632:	4638      	mov	r0, r7
 8005634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005638:	89ab      	ldrh	r3, [r5, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d907      	bls.n	800564e <_fwalk_reent+0x3a>
 800563e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005642:	3301      	adds	r3, #1
 8005644:	d003      	beq.n	800564e <_fwalk_reent+0x3a>
 8005646:	4629      	mov	r1, r5
 8005648:	4630      	mov	r0, r6
 800564a:	47c0      	blx	r8
 800564c:	4307      	orrs	r7, r0
 800564e:	3568      	adds	r5, #104	; 0x68
 8005650:	e7e9      	b.n	8005626 <_fwalk_reent+0x12>

08005652 <__retarget_lock_init_recursive>:
 8005652:	4770      	bx	lr

08005654 <__retarget_lock_acquire_recursive>:
 8005654:	4770      	bx	lr

08005656 <__retarget_lock_release_recursive>:
 8005656:	4770      	bx	lr

08005658 <__swhatbuf_r>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	460e      	mov	r6, r1
 800565c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005660:	2900      	cmp	r1, #0
 8005662:	b096      	sub	sp, #88	; 0x58
 8005664:	4614      	mov	r4, r2
 8005666:	461d      	mov	r5, r3
 8005668:	da08      	bge.n	800567c <__swhatbuf_r+0x24>
 800566a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	602a      	str	r2, [r5, #0]
 8005672:	061a      	lsls	r2, r3, #24
 8005674:	d410      	bmi.n	8005698 <__swhatbuf_r+0x40>
 8005676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800567a:	e00e      	b.n	800569a <__swhatbuf_r+0x42>
 800567c:	466a      	mov	r2, sp
 800567e:	f000 fca5 	bl	8005fcc <_fstat_r>
 8005682:	2800      	cmp	r0, #0
 8005684:	dbf1      	blt.n	800566a <__swhatbuf_r+0x12>
 8005686:	9a01      	ldr	r2, [sp, #4]
 8005688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800568c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005690:	425a      	negs	r2, r3
 8005692:	415a      	adcs	r2, r3
 8005694:	602a      	str	r2, [r5, #0]
 8005696:	e7ee      	b.n	8005676 <__swhatbuf_r+0x1e>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	2000      	movs	r0, #0
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	b016      	add	sp, #88	; 0x58
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056a4 <__smakebuf_r>:
 80056a4:	898b      	ldrh	r3, [r1, #12]
 80056a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056a8:	079d      	lsls	r5, r3, #30
 80056aa:	4606      	mov	r6, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	d507      	bpl.n	80056c0 <__smakebuf_r+0x1c>
 80056b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	2301      	movs	r3, #1
 80056ba:	6163      	str	r3, [r4, #20]
 80056bc:	b002      	add	sp, #8
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	ab01      	add	r3, sp, #4
 80056c2:	466a      	mov	r2, sp
 80056c4:	f7ff ffc8 	bl	8005658 <__swhatbuf_r>
 80056c8:	9900      	ldr	r1, [sp, #0]
 80056ca:	4605      	mov	r5, r0
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 f89d 	bl	800580c <_malloc_r>
 80056d2:	b948      	cbnz	r0, 80056e8 <__smakebuf_r+0x44>
 80056d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d8:	059a      	lsls	r2, r3, #22
 80056da:	d4ef      	bmi.n	80056bc <__smakebuf_r+0x18>
 80056dc:	f023 0303 	bic.w	r3, r3, #3
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	e7e3      	b.n	80056b0 <__smakebuf_r+0xc>
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <__smakebuf_r+0x7c>)
 80056ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	6020      	str	r0, [r4, #0]
 80056f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	9b00      	ldr	r3, [sp, #0]
 80056f8:	6163      	str	r3, [r4, #20]
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	6120      	str	r0, [r4, #16]
 80056fe:	b15b      	cbz	r3, 8005718 <__smakebuf_r+0x74>
 8005700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005704:	4630      	mov	r0, r6
 8005706:	f000 fc73 	bl	8005ff0 <_isatty_r>
 800570a:	b128      	cbz	r0, 8005718 <__smakebuf_r+0x74>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	89a0      	ldrh	r0, [r4, #12]
 800571a:	4305      	orrs	r5, r0
 800571c:	81a5      	strh	r5, [r4, #12]
 800571e:	e7cd      	b.n	80056bc <__smakebuf_r+0x18>
 8005720:	0800548d 	.word	0x0800548d

08005724 <malloc>:
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <malloc+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f000 b86f 	b.w	800580c <_malloc_r>
 800572e:	bf00      	nop
 8005730:	2000000c 	.word	0x2000000c

08005734 <_free_r>:
 8005734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005736:	2900      	cmp	r1, #0
 8005738:	d044      	beq.n	80057c4 <_free_r+0x90>
 800573a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573e:	9001      	str	r0, [sp, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f1a1 0404 	sub.w	r4, r1, #4
 8005746:	bfb8      	it	lt
 8005748:	18e4      	addlt	r4, r4, r3
 800574a:	f000 fc73 	bl	8006034 <__malloc_lock>
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <_free_r+0x94>)
 8005750:	9801      	ldr	r0, [sp, #4]
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x30>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005760:	f000 bc6e 	b.w	8006040 <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x46>
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	1961      	adds	r1, r4, r5
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1949      	addeq	r1, r1, r5
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x22>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x50>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x46>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1855      	adds	r5, r2, r1
 8005788:	42a5      	cmp	r5, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x70>
 800578c:	6824      	ldr	r4, [r4, #0]
 800578e:	4421      	add	r1, r4
 8005790:	1854      	adds	r4, r2, r1
 8005792:	42a3      	cmp	r3, r4
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x26>
 8005798:	681c      	ldr	r4, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	4421      	add	r1, r4
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	e7da      	b.n	800575a <_free_r+0x26>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x78>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x26>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf04      	itt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	bf04      	itt	eq
 80057bc:	1949      	addeq	r1, r1, r5
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	6054      	str	r4, [r2, #4]
 80057c2:	e7ca      	b.n	800575a <_free_r+0x26>
 80057c4:	b003      	add	sp, #12
 80057c6:	bd30      	pop	{r4, r5, pc}
 80057c8:	20000570 	.word	0x20000570

080057cc <sbrk_aligned>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4e0e      	ldr	r6, [pc, #56]	; (8005808 <sbrk_aligned+0x3c>)
 80057d0:	460c      	mov	r4, r1
 80057d2:	6831      	ldr	r1, [r6, #0]
 80057d4:	4605      	mov	r5, r0
 80057d6:	b911      	cbnz	r1, 80057de <sbrk_aligned+0x12>
 80057d8:	f000 fb7a 	bl	8005ed0 <_sbrk_r>
 80057dc:	6030      	str	r0, [r6, #0]
 80057de:	4621      	mov	r1, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 fb75 	bl	8005ed0 <_sbrk_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d00a      	beq.n	8005800 <sbrk_aligned+0x34>
 80057ea:	1cc4      	adds	r4, r0, #3
 80057ec:	f024 0403 	bic.w	r4, r4, #3
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d007      	beq.n	8005804 <sbrk_aligned+0x38>
 80057f4:	1a21      	subs	r1, r4, r0
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fb6a 	bl	8005ed0 <_sbrk_r>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d101      	bne.n	8005804 <sbrk_aligned+0x38>
 8005800:	f04f 34ff 	mov.w	r4, #4294967295
 8005804:	4620      	mov	r0, r4
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	20000574 	.word	0x20000574

0800580c <_malloc_r>:
 800580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005810:	1ccd      	adds	r5, r1, #3
 8005812:	f025 0503 	bic.w	r5, r5, #3
 8005816:	3508      	adds	r5, #8
 8005818:	2d0c      	cmp	r5, #12
 800581a:	bf38      	it	cc
 800581c:	250c      	movcc	r5, #12
 800581e:	2d00      	cmp	r5, #0
 8005820:	4607      	mov	r7, r0
 8005822:	db01      	blt.n	8005828 <_malloc_r+0x1c>
 8005824:	42a9      	cmp	r1, r5
 8005826:	d905      	bls.n	8005834 <_malloc_r+0x28>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	2600      	movs	r6, #0
 800582e:	4630      	mov	r0, r6
 8005830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005834:	4e2e      	ldr	r6, [pc, #184]	; (80058f0 <_malloc_r+0xe4>)
 8005836:	f000 fbfd 	bl	8006034 <__malloc_lock>
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	461c      	mov	r4, r3
 800583e:	bb34      	cbnz	r4, 800588e <_malloc_r+0x82>
 8005840:	4629      	mov	r1, r5
 8005842:	4638      	mov	r0, r7
 8005844:	f7ff ffc2 	bl	80057cc <sbrk_aligned>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	4604      	mov	r4, r0
 800584c:	d14d      	bne.n	80058ea <_malloc_r+0xde>
 800584e:	6834      	ldr	r4, [r6, #0]
 8005850:	4626      	mov	r6, r4
 8005852:	2e00      	cmp	r6, #0
 8005854:	d140      	bne.n	80058d8 <_malloc_r+0xcc>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4631      	mov	r1, r6
 800585a:	4638      	mov	r0, r7
 800585c:	eb04 0803 	add.w	r8, r4, r3
 8005860:	f000 fb36 	bl	8005ed0 <_sbrk_r>
 8005864:	4580      	cmp	r8, r0
 8005866:	d13a      	bne.n	80058de <_malloc_r+0xd2>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	3503      	adds	r5, #3
 800586c:	1a6d      	subs	r5, r5, r1
 800586e:	f025 0503 	bic.w	r5, r5, #3
 8005872:	3508      	adds	r5, #8
 8005874:	2d0c      	cmp	r5, #12
 8005876:	bf38      	it	cc
 8005878:	250c      	movcc	r5, #12
 800587a:	4629      	mov	r1, r5
 800587c:	4638      	mov	r0, r7
 800587e:	f7ff ffa5 	bl	80057cc <sbrk_aligned>
 8005882:	3001      	adds	r0, #1
 8005884:	d02b      	beq.n	80058de <_malloc_r+0xd2>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	442b      	add	r3, r5
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	e00e      	b.n	80058ac <_malloc_r+0xa0>
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	1b52      	subs	r2, r2, r5
 8005892:	d41e      	bmi.n	80058d2 <_malloc_r+0xc6>
 8005894:	2a0b      	cmp	r2, #11
 8005896:	d916      	bls.n	80058c6 <_malloc_r+0xba>
 8005898:	1961      	adds	r1, r4, r5
 800589a:	42a3      	cmp	r3, r4
 800589c:	6025      	str	r5, [r4, #0]
 800589e:	bf18      	it	ne
 80058a0:	6059      	strne	r1, [r3, #4]
 80058a2:	6863      	ldr	r3, [r4, #4]
 80058a4:	bf08      	it	eq
 80058a6:	6031      	streq	r1, [r6, #0]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4638      	mov	r0, r7
 80058ae:	f104 060b 	add.w	r6, r4, #11
 80058b2:	f000 fbc5 	bl	8006040 <__malloc_unlock>
 80058b6:	f026 0607 	bic.w	r6, r6, #7
 80058ba:	1d23      	adds	r3, r4, #4
 80058bc:	1af2      	subs	r2, r6, r3
 80058be:	d0b6      	beq.n	800582e <_malloc_r+0x22>
 80058c0:	1b9b      	subs	r3, r3, r6
 80058c2:	50a3      	str	r3, [r4, r2]
 80058c4:	e7b3      	b.n	800582e <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	6032      	streq	r2, [r6, #0]
 80058ce:	605a      	strne	r2, [r3, #4]
 80058d0:	e7ec      	b.n	80058ac <_malloc_r+0xa0>
 80058d2:	4623      	mov	r3, r4
 80058d4:	6864      	ldr	r4, [r4, #4]
 80058d6:	e7b2      	b.n	800583e <_malloc_r+0x32>
 80058d8:	4634      	mov	r4, r6
 80058da:	6876      	ldr	r6, [r6, #4]
 80058dc:	e7b9      	b.n	8005852 <_malloc_r+0x46>
 80058de:	230c      	movs	r3, #12
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4638      	mov	r0, r7
 80058e4:	f000 fbac 	bl	8006040 <__malloc_unlock>
 80058e8:	e7a1      	b.n	800582e <_malloc_r+0x22>
 80058ea:	6025      	str	r5, [r4, #0]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa0>
 80058ee:	bf00      	nop
 80058f0:	20000570 	.word	0x20000570

080058f4 <__sfputc_r>:
 80058f4:	6893      	ldr	r3, [r2, #8]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	b410      	push	{r4}
 80058fc:	6093      	str	r3, [r2, #8]
 80058fe:	da08      	bge.n	8005912 <__sfputc_r+0x1e>
 8005900:	6994      	ldr	r4, [r2, #24]
 8005902:	42a3      	cmp	r3, r4
 8005904:	db01      	blt.n	800590a <__sfputc_r+0x16>
 8005906:	290a      	cmp	r1, #10
 8005908:	d103      	bne.n	8005912 <__sfputc_r+0x1e>
 800590a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800590e:	f7ff bbf9 	b.w	8005104 <__swbuf_r>
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	1c58      	adds	r0, r3, #1
 8005916:	6010      	str	r0, [r2, #0]
 8005918:	7019      	strb	r1, [r3, #0]
 800591a:	4608      	mov	r0, r1
 800591c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005920:	4770      	bx	lr

08005922 <__sfputs_r>:
 8005922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	4614      	mov	r4, r2
 800592a:	18d5      	adds	r5, r2, r3
 800592c:	42ac      	cmp	r4, r5
 800592e:	d101      	bne.n	8005934 <__sfputs_r+0x12>
 8005930:	2000      	movs	r0, #0
 8005932:	e007      	b.n	8005944 <__sfputs_r+0x22>
 8005934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005938:	463a      	mov	r2, r7
 800593a:	4630      	mov	r0, r6
 800593c:	f7ff ffda 	bl	80058f4 <__sfputc_r>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d1f3      	bne.n	800592c <__sfputs_r+0xa>
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005948 <_vfiprintf_r>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	460d      	mov	r5, r1
 800594e:	b09d      	sub	sp, #116	; 0x74
 8005950:	4614      	mov	r4, r2
 8005952:	4698      	mov	r8, r3
 8005954:	4606      	mov	r6, r0
 8005956:	b118      	cbz	r0, 8005960 <_vfiprintf_r+0x18>
 8005958:	6983      	ldr	r3, [r0, #24]
 800595a:	b90b      	cbnz	r3, 8005960 <_vfiprintf_r+0x18>
 800595c:	f7ff fdca 	bl	80054f4 <__sinit>
 8005960:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <_vfiprintf_r+0x240>)
 8005962:	429d      	cmp	r5, r3
 8005964:	d11b      	bne.n	800599e <_vfiprintf_r+0x56>
 8005966:	6875      	ldr	r5, [r6, #4]
 8005968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d405      	bmi.n	800597a <_vfiprintf_r+0x32>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	059a      	lsls	r2, r3, #22
 8005972:	d402      	bmi.n	800597a <_vfiprintf_r+0x32>
 8005974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005976:	f7ff fe6d 	bl	8005654 <__retarget_lock_acquire_recursive>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	d501      	bpl.n	8005984 <_vfiprintf_r+0x3c>
 8005980:	692b      	ldr	r3, [r5, #16]
 8005982:	b9eb      	cbnz	r3, 80059c0 <_vfiprintf_r+0x78>
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff fc0e 	bl	80051a8 <__swsetup_r>
 800598c:	b1c0      	cbz	r0, 80059c0 <_vfiprintf_r+0x78>
 800598e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005990:	07dc      	lsls	r4, r3, #31
 8005992:	d50e      	bpl.n	80059b2 <_vfiprintf_r+0x6a>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b01d      	add	sp, #116	; 0x74
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	4b7b      	ldr	r3, [pc, #492]	; (8005b8c <_vfiprintf_r+0x244>)
 80059a0:	429d      	cmp	r5, r3
 80059a2:	d101      	bne.n	80059a8 <_vfiprintf_r+0x60>
 80059a4:	68b5      	ldr	r5, [r6, #8]
 80059a6:	e7df      	b.n	8005968 <_vfiprintf_r+0x20>
 80059a8:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <_vfiprintf_r+0x248>)
 80059aa:	429d      	cmp	r5, r3
 80059ac:	bf08      	it	eq
 80059ae:	68f5      	ldreq	r5, [r6, #12]
 80059b0:	e7da      	b.n	8005968 <_vfiprintf_r+0x20>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	0598      	lsls	r0, r3, #22
 80059b6:	d4ed      	bmi.n	8005994 <_vfiprintf_r+0x4c>
 80059b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ba:	f7ff fe4c 	bl	8005656 <__retarget_lock_release_recursive>
 80059be:	e7e9      	b.n	8005994 <_vfiprintf_r+0x4c>
 80059c0:	2300      	movs	r3, #0
 80059c2:	9309      	str	r3, [sp, #36]	; 0x24
 80059c4:	2320      	movs	r3, #32
 80059c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ce:	2330      	movs	r3, #48	; 0x30
 80059d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b94 <_vfiprintf_r+0x24c>
 80059d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059d8:	f04f 0901 	mov.w	r9, #1
 80059dc:	4623      	mov	r3, r4
 80059de:	469a      	mov	sl, r3
 80059e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e4:	b10a      	cbz	r2, 80059ea <_vfiprintf_r+0xa2>
 80059e6:	2a25      	cmp	r2, #37	; 0x25
 80059e8:	d1f9      	bne.n	80059de <_vfiprintf_r+0x96>
 80059ea:	ebba 0b04 	subs.w	fp, sl, r4
 80059ee:	d00b      	beq.n	8005a08 <_vfiprintf_r+0xc0>
 80059f0:	465b      	mov	r3, fp
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ff93 	bl	8005922 <__sfputs_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f000 80aa 	beq.w	8005b56 <_vfiprintf_r+0x20e>
 8005a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a04:	445a      	add	r2, fp
 8005a06:	9209      	str	r2, [sp, #36]	; 0x24
 8005a08:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80a2 	beq.w	8005b56 <_vfiprintf_r+0x20e>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a28:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2a:	4654      	mov	r4, sl
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a32:	4858      	ldr	r0, [pc, #352]	; (8005b94 <_vfiprintf_r+0x24c>)
 8005a34:	f7fa fbcc 	bl	80001d0 <memchr>
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	b9d8      	cbnz	r0, 8005a74 <_vfiprintf_r+0x12c>
 8005a3c:	06d1      	lsls	r1, r2, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2320      	movmi	r3, #32
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a46:	0713      	lsls	r3, r2, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	232b      	movmi	r3, #43	; 0x2b
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a50:	f89a 3000 	ldrb.w	r3, [sl]
 8005a54:	2b2a      	cmp	r3, #42	; 0x2a
 8005a56:	d015      	beq.n	8005a84 <_vfiprintf_r+0x13c>
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	4654      	mov	r4, sl
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f04f 0c0a 	mov.w	ip, #10
 8005a62:	4621      	mov	r1, r4
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	; 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94e      	bls.n	8005b0c <_vfiprintf_r+0x1c4>
 8005a6e:	b1b0      	cbz	r0, 8005a9e <_vfiprintf_r+0x156>
 8005a70:	9207      	str	r2, [sp, #28]
 8005a72:	e014      	b.n	8005a9e <_vfiprintf_r+0x156>
 8005a74:	eba0 0308 	sub.w	r3, r0, r8
 8005a78:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	46a2      	mov	sl, r4
 8005a82:	e7d2      	b.n	8005a2a <_vfiprintf_r+0xe2>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1d19      	adds	r1, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9103      	str	r1, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbb      	ittet	lt
 8005a90:	425b      	neglt	r3, r3
 8005a92:	f042 0202 	orrlt.w	r2, r2, #2
 8005a96:	9307      	strge	r3, [sp, #28]
 8005a98:	9307      	strlt	r3, [sp, #28]
 8005a9a:	bfb8      	it	lt
 8005a9c:	9204      	strlt	r2, [sp, #16]
 8005a9e:	7823      	ldrb	r3, [r4, #0]
 8005aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa2:	d10c      	bne.n	8005abe <_vfiprintf_r+0x176>
 8005aa4:	7863      	ldrb	r3, [r4, #1]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d135      	bne.n	8005b16 <_vfiprintf_r+0x1ce>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	9203      	str	r2, [sp, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bfb8      	it	lt
 8005ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aba:	3402      	adds	r4, #2
 8005abc:	9305      	str	r3, [sp, #20]
 8005abe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ba4 <_vfiprintf_r+0x25c>
 8005ac2:	7821      	ldrb	r1, [r4, #0]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f7fa fb82 	bl	80001d0 <memchr>
 8005acc:	b140      	cbz	r0, 8005ae0 <_vfiprintf_r+0x198>
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	eba0 000a 	sub.w	r0, r0, sl
 8005ad4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	4303      	orrs	r3, r0
 8005adc:	3401      	adds	r4, #1
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	482c      	ldr	r0, [pc, #176]	; (8005b98 <_vfiprintf_r+0x250>)
 8005ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aea:	2206      	movs	r2, #6
 8005aec:	f7fa fb70 	bl	80001d0 <memchr>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d03f      	beq.n	8005b74 <_vfiprintf_r+0x22c>
 8005af4:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <_vfiprintf_r+0x254>)
 8005af6:	bb1b      	cbnz	r3, 8005b40 <_vfiprintf_r+0x1f8>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	3307      	adds	r3, #7
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	3308      	adds	r3, #8
 8005b02:	9303      	str	r3, [sp, #12]
 8005b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b06:	443b      	add	r3, r7
 8005b08:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0a:	e767      	b.n	80059dc <_vfiprintf_r+0x94>
 8005b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b10:	460c      	mov	r4, r1
 8005b12:	2001      	movs	r0, #1
 8005b14:	e7a5      	b.n	8005a62 <_vfiprintf_r+0x11a>
 8005b16:	2300      	movs	r3, #0
 8005b18:	3401      	adds	r4, #1
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f04f 0c0a 	mov.w	ip, #10
 8005b22:	4620      	mov	r0, r4
 8005b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b28:	3a30      	subs	r2, #48	; 0x30
 8005b2a:	2a09      	cmp	r2, #9
 8005b2c:	d903      	bls.n	8005b36 <_vfiprintf_r+0x1ee>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0c5      	beq.n	8005abe <_vfiprintf_r+0x176>
 8005b32:	9105      	str	r1, [sp, #20]
 8005b34:	e7c3      	b.n	8005abe <_vfiprintf_r+0x176>
 8005b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e7f0      	b.n	8005b22 <_vfiprintf_r+0x1da>
 8005b40:	ab03      	add	r3, sp, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <_vfiprintf_r+0x258>)
 8005b48:	a904      	add	r1, sp, #16
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f3af 8000 	nop.w
 8005b50:	4607      	mov	r7, r0
 8005b52:	1c78      	adds	r0, r7, #1
 8005b54:	d1d6      	bne.n	8005b04 <_vfiprintf_r+0x1bc>
 8005b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b58:	07d9      	lsls	r1, r3, #31
 8005b5a:	d405      	bmi.n	8005b68 <_vfiprintf_r+0x220>
 8005b5c:	89ab      	ldrh	r3, [r5, #12]
 8005b5e:	059a      	lsls	r2, r3, #22
 8005b60:	d402      	bmi.n	8005b68 <_vfiprintf_r+0x220>
 8005b62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b64:	f7ff fd77 	bl	8005656 <__retarget_lock_release_recursive>
 8005b68:	89ab      	ldrh	r3, [r5, #12]
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	f53f af12 	bmi.w	8005994 <_vfiprintf_r+0x4c>
 8005b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b72:	e711      	b.n	8005998 <_vfiprintf_r+0x50>
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	462a      	mov	r2, r5
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <_vfiprintf_r+0x258>)
 8005b7c:	a904      	add	r1, sp, #16
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 f880 	bl	8005c84 <_printf_i>
 8005b84:	e7e4      	b.n	8005b50 <_vfiprintf_r+0x208>
 8005b86:	bf00      	nop
 8005b88:	08006234 	.word	0x08006234
 8005b8c:	08006254 	.word	0x08006254
 8005b90:	08006214 	.word	0x08006214
 8005b94:	08006274 	.word	0x08006274
 8005b98:	0800627e 	.word	0x0800627e
 8005b9c:	00000000 	.word	0x00000000
 8005ba0:	08005923 	.word	0x08005923
 8005ba4:	0800627a 	.word	0x0800627a

08005ba8 <_printf_common>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	4616      	mov	r6, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	688a      	ldr	r2, [r1, #8]
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bfb8      	it	lt
 8005bbc:	4613      	movlt	r3, r2
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	b10a      	cbz	r2, 8005bce <_printf_common+0x26>
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	0699      	lsls	r1, r3, #26
 8005bd2:	bf42      	ittt	mi
 8005bd4:	6833      	ldrmi	r3, [r6, #0]
 8005bd6:	3302      	addmi	r3, #2
 8005bd8:	6033      	strmi	r3, [r6, #0]
 8005bda:	6825      	ldr	r5, [r4, #0]
 8005bdc:	f015 0506 	ands.w	r5, r5, #6
 8005be0:	d106      	bne.n	8005bf0 <_printf_common+0x48>
 8005be2:	f104 0a19 	add.w	sl, r4, #25
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	6832      	ldr	r2, [r6, #0]
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dc26      	bgt.n	8005c3e <_printf_common+0x96>
 8005bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf4:	1e13      	subs	r3, r2, #0
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	bf18      	it	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	0692      	lsls	r2, r2, #26
 8005bfe:	d42b      	bmi.n	8005c58 <_printf_common+0xb0>
 8005c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c04:	4649      	mov	r1, r9
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d01e      	beq.n	8005c4c <_printf_common+0xa4>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	68e5      	ldr	r5, [r4, #12]
 8005c12:	6832      	ldr	r2, [r6, #0]
 8005c14:	f003 0306 	and.w	r3, r3, #6
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	bf08      	it	eq
 8005c1c:	1aad      	subeq	r5, r5, r2
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	bf0c      	ite	eq
 8005c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c28:	2500      	movne	r5, #0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bfc4      	itt	gt
 8005c2e:	1a9b      	subgt	r3, r3, r2
 8005c30:	18ed      	addgt	r5, r5, r3
 8005c32:	2600      	movs	r6, #0
 8005c34:	341a      	adds	r4, #26
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d11a      	bne.n	8005c70 <_printf_common+0xc8>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e008      	b.n	8005c50 <_printf_common+0xa8>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4649      	mov	r1, r9
 8005c44:	4638      	mov	r0, r7
 8005c46:	47c0      	blx	r8
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_printf_common+0xac>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7c6      	b.n	8005be6 <_printf_common+0x3e>
 8005c58:	18e1      	adds	r1, r4, r3
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	2030      	movs	r0, #48	; 0x30
 8005c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c62:	4422      	add	r2, r4
 8005c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	e7c7      	b.n	8005c00 <_printf_common+0x58>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4622      	mov	r2, r4
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0e6      	beq.n	8005c4c <_printf_common+0xa4>
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7d9      	b.n	8005c36 <_printf_common+0x8e>
	...

08005c84 <_printf_i>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	7e0f      	ldrb	r7, [r1, #24]
 8005c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c8c:	2f78      	cmp	r7, #120	; 0x78
 8005c8e:	4691      	mov	r9, r2
 8005c90:	4680      	mov	r8, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	469a      	mov	sl, r3
 8005c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c9a:	d807      	bhi.n	8005cac <_printf_i+0x28>
 8005c9c:	2f62      	cmp	r7, #98	; 0x62
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x32>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f000 80d8 	beq.w	8005e56 <_printf_i+0x1d2>
 8005ca6:	2f58      	cmp	r7, #88	; 0x58
 8005ca8:	f000 80a3 	beq.w	8005df2 <_printf_i+0x16e>
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb4:	e03a      	b.n	8005d2c <_printf_i+0xa8>
 8005cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cba:	2b15      	cmp	r3, #21
 8005cbc:	d8f6      	bhi.n	8005cac <_printf_i+0x28>
 8005cbe:	a101      	add	r1, pc, #4	; (adr r1, 8005cc4 <_printf_i+0x40>)
 8005cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005cad 	.word	0x08005cad
 8005cd0:	08005cad 	.word	0x08005cad
 8005cd4:	08005cad 	.word	0x08005cad
 8005cd8:	08005cad 	.word	0x08005cad
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005cad 	.word	0x08005cad
 8005ce8:	08005cad 	.word	0x08005cad
 8005cec:	08005cad 	.word	0x08005cad
 8005cf0:	08005e3d 	.word	0x08005e3d
 8005cf4:	08005d61 	.word	0x08005d61
 8005cf8:	08005e1f 	.word	0x08005e1f
 8005cfc:	08005cad 	.word	0x08005cad
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005e5f 	.word	0x08005e5f
 8005d08:	08005cad 	.word	0x08005cad
 8005d0c:	08005d61 	.word	0x08005d61
 8005d10:	08005cad 	.word	0x08005cad
 8005d14:	08005cad 	.word	0x08005cad
 8005d18:	08005e27 	.word	0x08005e27
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	1d1a      	adds	r2, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	602a      	str	r2, [r5, #0]
 8005d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0a3      	b.n	8005e78 <_printf_i+0x1f4>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	6829      	ldr	r1, [r5, #0]
 8005d34:	0606      	lsls	r6, r0, #24
 8005d36:	f101 0304 	add.w	r3, r1, #4
 8005d3a:	d50a      	bpl.n	8005d52 <_printf_i+0xce>
 8005d3c:	680e      	ldr	r6, [r1, #0]
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	2e00      	cmp	r6, #0
 8005d42:	da03      	bge.n	8005d4c <_printf_i+0xc8>
 8005d44:	232d      	movs	r3, #45	; 0x2d
 8005d46:	4276      	negs	r6, r6
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	485e      	ldr	r0, [pc, #376]	; (8005ec8 <_printf_i+0x244>)
 8005d4e:	230a      	movs	r3, #10
 8005d50:	e019      	b.n	8005d86 <_printf_i+0x102>
 8005d52:	680e      	ldr	r6, [r1, #0]
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d5a:	bf18      	it	ne
 8005d5c:	b236      	sxthne	r6, r6
 8005d5e:	e7ef      	b.n	8005d40 <_printf_i+0xbc>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	1d19      	adds	r1, r3, #4
 8005d66:	6029      	str	r1, [r5, #0]
 8005d68:	0601      	lsls	r1, r0, #24
 8005d6a:	d501      	bpl.n	8005d70 <_printf_i+0xec>
 8005d6c:	681e      	ldr	r6, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <_printf_i+0xf2>
 8005d70:	0646      	lsls	r6, r0, #25
 8005d72:	d5fb      	bpl.n	8005d6c <_printf_i+0xe8>
 8005d74:	881e      	ldrh	r6, [r3, #0]
 8005d76:	4854      	ldr	r0, [pc, #336]	; (8005ec8 <_printf_i+0x244>)
 8005d78:	2f6f      	cmp	r7, #111	; 0x6f
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2308      	moveq	r3, #8
 8005d7e:	230a      	movne	r3, #10
 8005d80:	2100      	movs	r1, #0
 8005d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d86:	6865      	ldr	r5, [r4, #4]
 8005d88:	60a5      	str	r5, [r4, #8]
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	bfa2      	ittt	ge
 8005d8e:	6821      	ldrge	r1, [r4, #0]
 8005d90:	f021 0104 	bicge.w	r1, r1, #4
 8005d94:	6021      	strge	r1, [r4, #0]
 8005d96:	b90e      	cbnz	r6, 8005d9c <_printf_i+0x118>
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	d04d      	beq.n	8005e38 <_printf_i+0x1b4>
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005da2:	fb03 6711 	mls	r7, r3, r1, r6
 8005da6:	5dc7      	ldrb	r7, [r0, r7]
 8005da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dac:	4637      	mov	r7, r6
 8005dae:	42bb      	cmp	r3, r7
 8005db0:	460e      	mov	r6, r1
 8005db2:	d9f4      	bls.n	8005d9e <_printf_i+0x11a>
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d10b      	bne.n	8005dd0 <_printf_i+0x14c>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07de      	lsls	r6, r3, #31
 8005dbc:	d508      	bpl.n	8005dd0 <_printf_i+0x14c>
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	6861      	ldr	r1, [r4, #4]
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	bfde      	ittt	le
 8005dc6:	2330      	movle	r3, #48	; 0x30
 8005dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd0:	1b52      	subs	r2, r2, r5
 8005dd2:	6122      	str	r2, [r4, #16]
 8005dd4:	f8cd a000 	str.w	sl, [sp]
 8005dd8:	464b      	mov	r3, r9
 8005dda:	aa03      	add	r2, sp, #12
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4640      	mov	r0, r8
 8005de0:	f7ff fee2 	bl	8005ba8 <_printf_common>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d14c      	bne.n	8005e82 <_printf_i+0x1fe>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b004      	add	sp, #16
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	4835      	ldr	r0, [pc, #212]	; (8005ec8 <_printf_i+0x244>)
 8005df4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005df8:	6829      	ldr	r1, [r5, #0]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e00:	6029      	str	r1, [r5, #0]
 8005e02:	061d      	lsls	r5, r3, #24
 8005e04:	d514      	bpl.n	8005e30 <_printf_i+0x1ac>
 8005e06:	07df      	lsls	r7, r3, #31
 8005e08:	bf44      	itt	mi
 8005e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e0e:	6023      	strmi	r3, [r4, #0]
 8005e10:	b91e      	cbnz	r6, 8005e1a <_printf_i+0x196>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	f023 0320 	bic.w	r3, r3, #32
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	2310      	movs	r3, #16
 8005e1c:	e7b0      	b.n	8005d80 <_printf_i+0xfc>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	f043 0320 	orr.w	r3, r3, #32
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	2378      	movs	r3, #120	; 0x78
 8005e28:	4828      	ldr	r0, [pc, #160]	; (8005ecc <_printf_i+0x248>)
 8005e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e2e:	e7e3      	b.n	8005df8 <_printf_i+0x174>
 8005e30:	0659      	lsls	r1, r3, #25
 8005e32:	bf48      	it	mi
 8005e34:	b2b6      	uxthmi	r6, r6
 8005e36:	e7e6      	b.n	8005e06 <_printf_i+0x182>
 8005e38:	4615      	mov	r5, r2
 8005e3a:	e7bb      	b.n	8005db4 <_printf_i+0x130>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	6826      	ldr	r6, [r4, #0]
 8005e40:	6961      	ldr	r1, [r4, #20]
 8005e42:	1d18      	adds	r0, r3, #4
 8005e44:	6028      	str	r0, [r5, #0]
 8005e46:	0635      	lsls	r5, r6, #24
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0x1cc>
 8005e4c:	6019      	str	r1, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0x1d2>
 8005e50:	0670      	lsls	r0, r6, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0x1c8>
 8005e54:	8019      	strh	r1, [r3, #0]
 8005e56:	2300      	movs	r3, #0
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	4615      	mov	r5, r2
 8005e5c:	e7ba      	b.n	8005dd4 <_printf_i+0x150>
 8005e5e:	682b      	ldr	r3, [r5, #0]
 8005e60:	1d1a      	adds	r2, r3, #4
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	681d      	ldr	r5, [r3, #0]
 8005e66:	6862      	ldr	r2, [r4, #4]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7fa f9b0 	bl	80001d0 <memchr>
 8005e70:	b108      	cbz	r0, 8005e76 <_printf_i+0x1f2>
 8005e72:	1b40      	subs	r0, r0, r5
 8005e74:	6060      	str	r0, [r4, #4]
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e80:	e7a8      	b.n	8005dd4 <_printf_i+0x150>
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	462a      	mov	r2, r5
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d0ab      	beq.n	8005de8 <_printf_i+0x164>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	079b      	lsls	r3, r3, #30
 8005e94:	d413      	bmi.n	8005ebe <_printf_i+0x23a>
 8005e96:	68e0      	ldr	r0, [r4, #12]
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	4298      	cmp	r0, r3
 8005e9c:	bfb8      	it	lt
 8005e9e:	4618      	movlt	r0, r3
 8005ea0:	e7a4      	b.n	8005dec <_printf_i+0x168>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	47d0      	blx	sl
 8005eac:	3001      	adds	r0, #1
 8005eae:	d09b      	beq.n	8005de8 <_printf_i+0x164>
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	68e3      	ldr	r3, [r4, #12]
 8005eb4:	9903      	ldr	r1, [sp, #12]
 8005eb6:	1a5b      	subs	r3, r3, r1
 8005eb8:	42ab      	cmp	r3, r5
 8005eba:	dcf2      	bgt.n	8005ea2 <_printf_i+0x21e>
 8005ebc:	e7eb      	b.n	8005e96 <_printf_i+0x212>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	f104 0619 	add.w	r6, r4, #25
 8005ec4:	e7f5      	b.n	8005eb2 <_printf_i+0x22e>
 8005ec6:	bf00      	nop
 8005ec8:	08006285 	.word	0x08006285
 8005ecc:	08006296 	.word	0x08006296

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_sbrk_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fa ffc4 	bl	8000e68 <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	20000578 	.word	0x20000578

08005ef0 <__sread>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	f000 f8a8 	bl	800604c <_read_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	bfab      	itete	ge
 8005f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f02:	89a3      	ldrhlt	r3, [r4, #12]
 8005f04:	181b      	addge	r3, r3, r0
 8005f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f0a:	bfac      	ite	ge
 8005f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f0e:	81a3      	strhlt	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__swrite>:
 8005f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	461f      	mov	r7, r3
 8005f18:	898b      	ldrh	r3, [r1, #12]
 8005f1a:	05db      	lsls	r3, r3, #23
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4616      	mov	r6, r2
 8005f22:	d505      	bpl.n	8005f30 <__swrite+0x1e>
 8005f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f28:	2302      	movs	r3, #2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f000 f870 	bl	8006010 <_lseek_r>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	463b      	mov	r3, r7
 8005f40:	4628      	mov	r0, r5
 8005f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	f000 b817 	b.w	8005f78 <_write_r>

08005f4a <__sseek>:
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 f85d 	bl	8006010 <_lseek_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	bf15      	itete	ne
 8005f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f66:	81a3      	strheq	r3, [r4, #12]
 8005f68:	bf18      	it	ne
 8005f6a:	81a3      	strhne	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__sclose>:
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 b81b 	b.w	8005fac <_close_r>
	...

08005f78 <_write_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	; (8005f98 <_write_r+0x20>)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fa fcc8 	bl	800091c <_write>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_write_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_write_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20000578 	.word	0x20000578

08005f9c <abort>:
 8005f9c:	b508      	push	{r3, lr}
 8005f9e:	2006      	movs	r0, #6
 8005fa0:	f000 f88e 	bl	80060c0 <raise>
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7fa ff03 	bl	8000db0 <_exit>
	...

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	; (8005fc8 <_close_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fa ff21 	bl	8000dfe <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000578 	.word	0x20000578

08005fcc <_fstat_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_fstat_r+0x20>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	f7fa ff1c 	bl	8000e16 <_fstat>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d102      	bne.n	8005fe8 <_fstat_r+0x1c>
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	b103      	cbz	r3, 8005fe8 <_fstat_r+0x1c>
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	20000578 	.word	0x20000578

08005ff0 <_isatty_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d06      	ldr	r5, [pc, #24]	; (800600c <_isatty_r+0x1c>)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fa ff1b 	bl	8000e36 <_isatty>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_isatty_r+0x1a>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_isatty_r+0x1a>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20000578 	.word	0x20000578

08006010 <_lseek_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	; (8006030 <_lseek_r+0x20>)
 8006014:	4604      	mov	r4, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fa ff14 	bl	8000e4c <_lseek>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_lseek_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_lseek_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000578 	.word	0x20000578

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f7ff bb0d 	b.w	8005654 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	2000056c 	.word	0x2000056c

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f7ff bb08 	b.w	8005656 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	2000056c 	.word	0x2000056c

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_read_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fa feb2 	bl	8000dc4 <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000578 	.word	0x20000578

08006070 <_raise_r>:
 8006070:	291f      	cmp	r1, #31
 8006072:	b538      	push	{r3, r4, r5, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	d904      	bls.n	8006084 <_raise_r+0x14>
 800607a:	2316      	movs	r3, #22
 800607c:	6003      	str	r3, [r0, #0]
 800607e:	f04f 30ff 	mov.w	r0, #4294967295
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006086:	b112      	cbz	r2, 800608e <_raise_r+0x1e>
 8006088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800608c:	b94b      	cbnz	r3, 80060a2 <_raise_r+0x32>
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f830 	bl	80060f4 <_getpid_r>
 8006094:	462a      	mov	r2, r5
 8006096:	4601      	mov	r1, r0
 8006098:	4620      	mov	r0, r4
 800609a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609e:	f000 b817 	b.w	80060d0 <_kill_r>
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d00a      	beq.n	80060bc <_raise_r+0x4c>
 80060a6:	1c59      	adds	r1, r3, #1
 80060a8:	d103      	bne.n	80060b2 <_raise_r+0x42>
 80060aa:	2316      	movs	r3, #22
 80060ac:	6003      	str	r3, [r0, #0]
 80060ae:	2001      	movs	r0, #1
 80060b0:	e7e7      	b.n	8006082 <_raise_r+0x12>
 80060b2:	2400      	movs	r4, #0
 80060b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060b8:	4628      	mov	r0, r5
 80060ba:	4798      	blx	r3
 80060bc:	2000      	movs	r0, #0
 80060be:	e7e0      	b.n	8006082 <_raise_r+0x12>

080060c0 <raise>:
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <raise+0xc>)
 80060c2:	4601      	mov	r1, r0
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f7ff bfd3 	b.w	8006070 <_raise_r>
 80060ca:	bf00      	nop
 80060cc:	2000000c 	.word	0x2000000c

080060d0 <_kill_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_kill_r+0x20>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	f7fa fe57 	bl	8000d90 <_kill>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d102      	bne.n	80060ec <_kill_r+0x1c>
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	b103      	cbz	r3, 80060ec <_kill_r+0x1c>
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	bd38      	pop	{r3, r4, r5, pc}
 80060ee:	bf00      	nop
 80060f0:	20000578 	.word	0x20000578

080060f4 <_getpid_r>:
 80060f4:	f7fa be44 	b.w	8000d80 <_getpid>

080060f8 <_init>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr

08006104 <_fini>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr
